; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\OPCODES.C"
	.assume ADL=1
	SEGMENT BSS
_buffer:
	DS	16
;    1	
;    2	#include <stdbool.h>
;    3	#include <stddef.h>
;    4	#include <stdint.h>
;    5	#include <tice.h>
;    6	
;    7	#include <math.h>
;    8	#include <stdio.h>
;    9	#include <stdlib.h>
;   10	#include <string.h>
;   11	
;   12	#include "opcodes.h"
;   13	
;   14	#define buffer_len 16
;   15	uint8_t buffer[buffer_len];
	SEGMENT CODE
;   16	
;   17	void clearBuffer(void){
_clearBuffer:
;   18		memset(&buffer,0,buffer_len);
	LD	BC,16
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_buffer
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;   19	}
	RET	


;**************************** _clearBuffer ***************************
;Name                         Addr/Register   Size   Type
;_buffer                             STATIC     16   variable
;_memset                             IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   20	
;   21	uint8_t *OpcodesA(const char *line){
_OpcodesA:
	LD	HL,-3
	CALL	__frameset
;   22		if (!strncmp(line,"ADD ",4)){
	LD	BC,4
	PUSH	BC
	LD	BC,L__1
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_20
;   23			if (checkRRArg(line+4,0x09)) {
	LD	BC,9
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_4
;   24				return &buffer;
	LD	HL,_buffer
	JR	L_22
;   25			} else if (checkRArg(line+4,0x80)){
L_4:
	LD	BC,128
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_2
;   26				return &buffer;
	LD	HL,_buffer
	JR	L_22
;   27			} else {
L_2:
;   28				return invalidArgument();
	CALL	_invalidArgument
	JR	L_22
;   29			}
;   30		} else if (!strncmp(line,"ADC ",4)) {
L_20:
	LD	BC,4
	PUSH	BC
	LD	BC,L__5
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_18
;   31			if (checkRRArg(line+4,0x4A)){
	LD	BC,74
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_11
;   32				if (buffer[1]==0xDD || buffer[1]==0xFD){
	LD	BC,_buffer
	INC	BC
	LD	(IX+-3),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,221
	SBC	HL,BC
	JR	Z,L_6
	LD	HL,(IX+-3)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,253
	SBC	HL,BC
	JR	NZ,L_7
L_6:
;   33					return invalidArgument();
	CALL	_invalidArgument
	JR	L_22
;   34				} else {
L_7:
;   35					buffer[2] = buffer[1]+0x41;
	LD	HL,(IX+-3)
	LD	A,(HL)
	LD	HL,_buffer+2
	ADD	A,65
	LD	(HL),A
;   36					buffer[1] = 0xED;
	LD	HL,(IX+-3)
	LD	(HL),237
;   37				}
;   38				return &buffer;
	LD	HL,_buffer
	JR	L_22
;   39			} else if (checkRArg(line+4,0x88)){
L_11:
	LD	BC,136
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_21
;   40				return &buffer;
	LD	HL,_buffer
	JR	L_22
;   41			}
;   42		} else if (!strncmp(line,"AND ",4)) {
L_18:
	LD	BC,4
	PUSH	BC
	LD	BC,L__11
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_21
;   43			if (isNumber(line+4)){
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_15
;   44				line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;   45				buffer[0]=2;
;   46				buffer[1]=0xE6;
;   47				buffer[2]=getNumber(&line);
	PEA	IX+6
	LD	A,2
	LD	(_buffer),A
	LD	HL,_buffer
	INC	HL
	LD	(HL),230
	CALL	_getNumber
	POP	BC
	LD	IY,_buffer
	LD	(IY+2),L
;   48				return &buffer;
	LD	HL,_buffer
	JR	L_22
;   49			} else if (checkRArg(line+4,0xA0)){
L_15:
	LD	BC,160
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_13
;   50				return &buffer;
	LD	HL,_buffer
	JR	L_22
;   51			} else {
L_13:
;   52				return invalidArgument();
	CALL	_invalidArgument
	JR	L_22
;   53			}
;   54		}
L_21:
	OR	A,A
;   55		return 0;
	SBC	HL,HL
;   56	}
L_22:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesA ***************************
;Name                         Addr/Register   Size   Type
;_getNumber                          IMPORT  -----   function
;_isNumber                           IMPORT  -----   function
;_invalidArgument                    IMPORT  -----   function
;_checkRArg                          IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_checkRRArg                         IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;G_0                                   IX-3      3   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"ADD "
	DB	0
L__5:
	DB	"ADC "
	DB	0
L__11:
	DB	"AND "
	DB	0
	SEGMENT CODE
;   57	
;   58	uint8_t *OpcodesB(const char *line){
_OpcodesB:
	LD	HL,-2
	CALL	__frameset
;   59		if (!strncmp(line,"BIT ",4)){
	LD	BC,4
	PUSH	BC
	LD	BC,L__16
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_29
;   60			uint8_t r,bit;
;   61			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;   62			bit=getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	(IX+-2),L
;   63			if (bit<=7){
	LD	A,7
	CP	A,(IX+-2)
	JR	C,L_27
;   64				if (r=isIrOff(line)){
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_isIrOff
	POP	BC
	LD	(IX+-1),L
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_25
;   65					buffer[0]=4;
	LD	A,4
	LD	(_buffer),A
;   66					buffer[1]=r;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-1)
;   67					buffer[2]=0xCB;
;   68					buffer[3]=getIrOff(&line);
	PEA	IX+6
	LD	IY,_buffer
	LD	(HL),A
	LD	(IY+2),203
	CALL	_getIrOff
	POP	BC
	LD	IY,_buffer
	LEA	HL,IY+3
	LD	(HL),A
;   69					buffer[4]=0x46+(bit<<3);
	LEA	HL,IY+4
	LD	A,(IX+-2)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,70
	LD	(HL),A
;   70				} else if ((r=getRArgN(line))!=0xFF){
	JR	L_27
L_25:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-1),A
	CP	A,255
	JR	Z,L_27
;   71					buffer[0]=2;
	LD	A,2
;   72					buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),203
;   73					buffer[2]=0x40+r+(bit<<3);
	LD	A,(IX+-1)
	ADD	A,64
	LD	B,A
	LD	HL,_buffer+2
	LD	A,(IX+-2)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	C,A
	LD	A,B
	ADD	A,C
	LD	(HL),A
;   74					return &buffer;
	LD	HL,_buffer
	JR	L_30
;   75				}
;   76			}
L_27:
;   77			return invalidArgument();
	CALL	_invalidArgument
	JR	L_30
;   78		}
L_29:
	OR	A,A
;   79		return 0;
	SBC	HL,HL
;   80	}
L_30:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesB ***************************
;Name                         Addr/Register   Size   Type
;_invalidArgument                    IMPORT  -----   function
;_getRArgN                           IMPORT  -----   function
;_getIrOff                           IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_isIrOff                            IMPORT  -----   function
;_getNumber                          IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;bit                                   IX-2      1   variable
;r                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__16:
	DB	"BIT "
	DB	0
	SEGMENT CODE
;   81	
;   82	uint8_t *OpcodesC(const char *line){
_OpcodesC:
	CALL	__frameset0
;   83		if (!strncmp(line,"CP ",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__22
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_47
;   84			if (isNumber(line+3)){
	LD	IY,(IX+6)
	LEA	BC,IY+3
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_33
;   85				line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;   86				buffer[0]=2;
;   87				buffer[1]=0xFE;
;   88				buffer[2] = getNumber(&line);
	PEA	IX+6
	LD	A,2
	LD	(_buffer),A
	LD	HL,_buffer
	INC	HL
	LD	(HL),254
	CALL	_getNumber
	POP	BC
	LD	IY,_buffer
	LD	(IY+2),L
;   89				return &buffer;
	LD	HL,_buffer
	JR	L_49
;   90			} else if (checkRArg(line+3,0xB8)){
L_33:
	LD	BC,184
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+3
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_48
;   91				return &buffer;
	LD	HL,_buffer
	JR	L_49
;   92			}
;   93		} else if (!strncmp(line,"CPL",3)){ 
L_47:
	LD	BC,3
	PUSH	BC
	LD	BC,L__26
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_45
;   94			buffer[0]=1;
	LD	A,1
;   95			buffer[1]=0x2F;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),47
;   96			return &buffer;
	LD	HL,_buffer
	JR	L_49
;   97		} else if (!strncmp(line,"CCF",3)){
L_45:
	LD	BC,3
	PUSH	BC
	LD	BC,L__28
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_43
;   98			buffer[0]=1;
	LD	A,1
;   99			buffer[1]=0x3F;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),63
;  100			return &buffer;
	LD	HL,_buffer
	JR	L_49
;  101		} else {
L_43:
;  102			buffer[0]=2;
	LD	A,2
;  103			buffer[1]=0xED;
	LD	HL,_buffer
;  104			if (!strncmp(line,"CPIR",4)){
	LD	BC,4
	PUSH	BC
	INC	HL
	LD	(_buffer),A
	LD	BC,L__30
	PUSH	BC
	LD	(HL),237
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_40
;  105				buffer[2]=0xB1;
	LD	HL,_buffer+2
	LD	(HL),177
;  106				return &buffer;
	LD	HL,_buffer
	JR	L_49
;  107			} else if (!strncmp(line,"CPDR",4)){
L_40:
	LD	BC,4
	PUSH	BC
	LD	BC,L__32
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_38
;  108				buffer[2]=0xB9;
	LD	HL,_buffer+2
	LD	(HL),185
;  109				return &buffer;
	LD	HL,_buffer
	JR	L_49
;  110			} else if (!strncmp(line,"CPI",3)){
L_38:
	LD	BC,3
	PUSH	BC
	LD	BC,L__34
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_36
;  111				buffer[2]=0xA1;
	LD	HL,_buffer+2
	LD	(HL),161
;  112				return &buffer;
	LD	HL,_buffer
	JR	L_49
;  113			} else if (!strncmp(line,"CPD",3)){
L_36:
	LD	BC,3
	PUSH	BC
	LD	BC,L__36
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_41
;  114				buffer[2]=0xA9;
	LD	HL,_buffer+2
	LD	(HL),169
;  115				return &buffer;
	LD	HL,_buffer
	JR	L_49
;  116			}
L_41:
;  117			buffer[0]=0;
	XOR	A,A
	LD	(_buffer),A
;  118		}
L_48:
	OR	A,A
;  119		return 0;
	SBC	HL,HL
;  120	}
L_49:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesC ***************************
;Name                         Addr/Register   Size   Type
;_checkRArg                          IMPORT  -----   function
;_getNumber                          IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_isNumber                           IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;line                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__22:
	DB	"CP "
	DB	0
L__26:
	DB	"CPL"
	DB	0
L__28:
	DB	"CCF"
	DB	0
L__30:
	DB	"CPIR"
	DB	0
L__32:
	DB	"CPDR"
	DB	0
L__34:
	DB	"CPI"
	DB	0
L__36:
	DB	"CPD"
	DB	0
	SEGMENT CODE
;  121	
;  122	uint8_t *OpcodesD(const char *line){
_OpcodesD:
	LD	HL,-410
	CALL	__frameset
;  123		uint8_t o;
;  124		if (!strncmp(line,"DEC ",4)){
	LD	BC,4
	PUSH	BC
	LD	BC,L__39
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_85
;  125			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  126			if (checkRRArg(line,0x0B)){
	LD	BC,11
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_56
;  127				return &buffer;
	LD	HL,_buffer
	JR	L_87
;  128			} else if ((o = getRArgN(line))!=0xFF){
L_56:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-4),A
	CP	A,255
	JR	Z,L_54
;  129				if (buffer[0]==1){
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_51
;  130					buffer[1]=(o<<3)+0x05;
	LD	A,(IX+-4)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	HL,_buffer
	INC	HL
	ADD	A,5
	LD	(HL),A
;  131				} else {
	JR	L_52
L_51:
;  132					buffer[2]=(o<<3)+0x05;
	LD	A,(IX+-4)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,5
	LD	HL,_buffer+2
	LD	(HL),A
;  133				}
L_52:
;  134				return &buffer;
	LD	HL,_buffer
	JR	L_87
;  135			} else {
L_54:
;  136				return invalidArgument();
	CALL	_invalidArgument
	JR	L_87
;  137			}
;  138		} else if (!strncmp(line,"DJNZ ",5)){
L_85:
	LD	BC,5
	PUSH	BC
	LD	BC,L__44
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_83
;  139			int num;
;  140			line+=5;
	LD	IY,(IX+6)
	LEA	IY,IY+5
	LD	(IX+6),IY
;  141			num = getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	(IX+-7),HL
;  142			if (num<-0x80 || num>=0x80){
	LD	BC,16777088
	OR	A,A
	SBC	HL,BC
	JP	M,L_58
	LD	BC,128
	LD	HL,(IX+-7)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_59
L_58:
;  143				ErrorCode = "DJNZ Offset out of range";
	LD	BC,L__48
	LD	(_ErrorCode),BC
	OR	A,A
;  144				return 0;
	SBC	HL,HL
	JR	L_87
;  145			}
L_59:
;  146			buffer[0]=2;
	LD	A,2
;  147			buffer[1]=0x10;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),16
;  148			buffer[2]=num;
	LD	HL,_buffer+2
	LD	A,(IX+-7)
	LD	(HL),A
;  149		} else if (!strncmp(line,"DAA",3)){
	JR	L_86
L_83:
	LD	BC,3
	PUSH	BC
	LD	BC,L__49
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_81
;  150			buffer[0]=1;
	LD	A,1
;  151			buffer[1]=0x27;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),39
;  152			return &buffer;
	LD	HL,_buffer
	JR	L_87
;  153		} else if (!strncmp(line,"DB ",3)){
L_81:
	LD	BC,3
	PUSH	BC
	LD	BC,L__51
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_79
;  154			uint8_t buf2[65];
;  155			uint8_t i=1;
	LD	(IX+-1),1
;  156			line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  157			do {
L_62:
;  158				buf2[i++] = getNumber(&line);
	LD	A,(IX+-1)
	PEA	IX+6
	PUSH	IY
	PUSH	BC
	LD	IY,-410
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_getNumber
	PUSH	IY
	PUSH	BC
	LD	IY,-410
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	POP	BC
	LD	B,L
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LEA	HL,IX+-72
	ADD	HL,DE
	LD	(HL),B
	INC	(IX+-1)
;  159				if (i>=64){
	LD	A,(IX+-1)
	CP	A,64
	JR	C,L_63
;  160					ErrorCode = "DB takes at most 64 args";
	LD	BC,L__54
	LD	(_ErrorCode),BC
;  161					break;
	JR	L_64
;  162				}
;  163			} while (*(line-1)==',');
L_63:
	LD	IY,(IX+6)
	LEA	HL,IY+-1
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,44
	SBC	HL,BC
	JR	Z,L_62
L_64:
;  164			buf2[0]=i;
	LD	A,(IX+-1)
	LD	(IX+-72),A
;  165			return &buf2;
	LEA	HL,IX+-72
	JR	L_87
;  166		} else if (!strncmp(line,"DW ",3)){
L_79:
	LD	BC,3
	PUSH	BC
	LD	BC,L__56
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_77
;  167			uint16_t buf2[65];
;  168			uint8_t i=1;
	LD	(IX+-2),1
;  169			line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  170			do {
L_67:
;  171				buf2[i++] = getNumber(&line);
	LD	A,(IX+-2)
	PEA	IX+6
	PUSH	IY
	PUSH	BC
	LD	IY,-410
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_getNumber
	PUSH	IY
	PUSH	BC
	LD	IY,-410
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	LD	BC,HL
	POP	DE
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	LD	DE,HL
	LD	HL,IX
;  172				if (i>64){
	LD	A,64
	PUSH	BC
	PUSH	HL
	LD	HL,DE
	LD	BC,-406	; spill
	CALL	__istix
	POP	HL
	POP	BC
	LD	DE,-202
	PUSH	BC
	PUSH	HL
	LD	HL,DE	; unspill
	LD	BC,-409	; spill
	CALL	__istix
	POP	HL
	LD	BC,-406	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,-406	; spill
	CALL	__istix
	POP	HL
	LD	BC,-409	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	PUSH	BC
	LD	BC,-406	; unspill
	PUSH	HL
	CALL	__ildix
	LD	DE,HL
	POP	HL
	POP	BC
	ADD	HL,DE
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	(IX+-2)
	CP	A,(IX+-2)
	JR	NC,L_68
;  173					ErrorCode = "DW takes at most 64 args";
	LD	BC,L__59
	LD	(_ErrorCode),BC
;  174					break;
	JR	L_69
;  175				}
;  176			} while (*(line-1)==',');
L_68:
	LD	IY,(IX+6)
	LEA	HL,IY+-1
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,44
	SBC	HL,BC
	JR	Z,L_67
L_69:
;  177			buf2[0]=i<<8;
	LD	C,(IX+-2)
	LD	B,0
	LD	HL,BC
	LD	H,L
	LD	L,0
	LD	BC,HL
;  178			return (uint8_t*)&buf2+1;
	LD	HL,IX
	LD	DE,-202
	ADD	HL,DE
	INC	HL
	LEA	IY,IX+-128
	LD	(IY+-74),C
	LD	(IY+-73),B
	JR	L_87
;  179		} else if (!strncmp(line,"DL ",3)){
L_77:
	LD	BC,3
	PUSH	BC
	LD	BC,L__61
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_86
;  180			unsigned int buf2[65];
;  181			uint8_t i=1;
	LD	(IX+-3),1
;  182			line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  183			do {
L_72:
;  184				buf2[i++] = getNumber(&line);
	LD	A,(IX+-3)
	PEA	IX+6
	PUSH	IY
	PUSH	BC
	LD	IY,-410
	LD	BC,IX
	ADD	IY,BC
	LD	(IY),A
	POP	BC
	POP	IY
	CALL	_getNumber
	PUSH	IY
	PUSH	BC
	LD	IY,-410
	LD	BC,IX
	ADD	IY,BC
	LD	A,(IY)
	POP	BC
	POP	IY
	LD	BC,HL
	PUSH	BC
	PUSH	HL
	LD	HL,BC
	LD	BC,-403	; spill
	CALL	__istix
	POP	HL
	POP	BC
	POP	DE
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,3
	CALL	__imulu
	LD	DE,HL
	LD	HL,IX
;  185				if (i>64){
	LD	A,64
	LD	BC,-397
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,-403	; unspill
	PUSH	HL
	CALL	__ildix
	LD	BC,HL
	POP	HL
	LD	(HL),BC
	INC	(IX+-3)
	CP	A,(IX+-3)
	JR	NC,L_73
;  186					ErrorCode = "DL takes at most 64 args";
	LD	BC,L__64
	LD	(_ErrorCode),BC
;  187					break;
	JR	L_74
;  188				}
;  189			} while (*(line-1)==',');
L_73:
	LD	IY,(IX+6)
	LEA	HL,IY+-1
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,44
	SBC	HL,BC
	JR	Z,L_72
L_74:
;  190			buf2[0]=i<<16;
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	A,16
	CALL	__ishl_b
	LD	BC,-397
;  191			return (uint8_t*)&buf2+2;
	LD	IY,IX
	LD	DE,-397
	ADD	IY,DE
	CALL	__istix
	LEA	HL,IY+2
	JR	L_87
;  192		}
L_86:
	OR	A,A
;  193		return 0;
	SBC	HL,HL
;  194	}
L_87:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesD ***************************
;Name                         Addr/Register   Size   Type
;_ErrorCode                          IMPORT      3   variable
;_getNumber                          IMPORT  -----   function
;_invalidArgument                    IMPORT  -----   function
;_getRArgN                           IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_checkRRArg                         IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;buf2                                IX-397    195   variable
;buf2                                IX-202    130   variable
;buf2                                 IX-72     65   variable
;num                                   IX-7      3   variable
;o                                     IX-4      1   variable
;i                                     IX-3      1   variable
;i                                     IX-2      1   variable
;i                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 419 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__39:
	DB	"DEC "
	DB	0
L__44:
	DB	"DJNZ "
	DB	0
L__48:
	DB	"DJNZ Offset out of range"
	DB	0
L__49:
	DB	"DAA"
	DB	0
L__51:
	DB	"DB "
	DB	0
L__54:
	DB	"DB takes at most 64 args"
	DB	0
L__56:
	DB	"DW "
	DB	0
L__59:
	DB	"DW takes at most 64 args"
	DB	0
L__61:
	DB	"DL "
	DB	0
L__64:
	DB	"DL takes at most 64 args"
	DB	0
	SEGMENT CODE
;  195	
;  196	uint8_t *OpcodesE(const char *line){
_OpcodesE:
	CALL	__frameset0
;  197		if (!strncmp(line,"EX ",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__67
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_97
;  198			buffer[0]=1;
	LD	A,1
	LD	(_buffer),A
;  199			line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  200			if (!strncmp(line,"HL,DE",5)){
	LD	BC,5
	PUSH	BC
	LD	BC,L__69
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_93
;  201				buffer[1]=0xEB;
	LD	HL,_buffer
	INC	HL
	LD	(HL),235
;  202			} else if (!strncmp(line,"HL,(SP)",7)){
	JR	L_94
L_93:
	LD	BC,7
	PUSH	BC
	LD	BC,L__71
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_91
;  203				buffer[1]=0xE3;
	LD	HL,_buffer
	INC	HL
	LD	(HL),227
;  204			} else if (!strncmp(line,"AF",2)) {
	JR	L_94
L_91:
	LD	BC,2
	PUSH	BC
	LD	BC,L__73
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_89
;  205				buffer[1]=0x08;
	LD	HL,_buffer
	INC	HL
	LD	(HL),8
;  206			} else {
	JR	L_94
L_89:
;  207				return invalidArgument();
	CALL	_invalidArgument
	JR	L_99
;  208			}
L_94:
;  209			return &buffer;
	LD	HL,_buffer
	JR	L_99
;  210		} else if (!strncmp(line,"EXX",3)){
L_97:
	LD	BC,3
	PUSH	BC
	LD	BC,L__75
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_98
;  211			buffer[0]=1;
	LD	A,1
;  212			buffer[1]=0xD9;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),217
;  213			return &buffer;
	LD	HL,_buffer
	JR	L_99
;  214		}
L_98:
	OR	A,A
;  215		return 0;
	SBC	HL,HL
;  216	}
L_99:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesE ***************************
;Name                         Addr/Register   Size   Type
;_invalidArgument                    IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_strncmp                            IMPORT  -----   function
;line                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__67:
	DB	"EX "
	DB	0
L__69:
	DB	"HL,DE"
	DB	0
L__71:
	DB	"HL,(SP)"
	DB	0
L__73:
	DB	"AF"
	DB	0
L__75:
	DB	"EXX"
	DB	0
	SEGMENT CODE
;  217	
;  218	uint8_t *OpcodesF(const char *line){
_OpcodesF:
	CALL	__frameset0
;  219		if (!strncmp(line,"FORMAT ",7)){
	LD	BC,7
	PUSH	BC
	LD	BC,L__78
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_103
;  220			line+=7;
	LD	IY,(IX+6)
	LEA	IY,IY+7
	LD	(IX+6),IY
;  221			if (!strncmp(line,"ASM",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__80
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_101
;  222				buffer[0]=2;
	LD	A,2
;  223				buffer[1]=0xEF;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  224				buffer[2]=0x7B;
	LD	IY,_buffer
	LD	(HL),239
	LD	(IY+2),123
;  225				return &buffer;
	LD	HL,_buffer
	JR	L_104
;  226			} else {
L_101:
;  227				ErrorCode = "Bad Format";
	LD	BC,L__82
	LD	(_ErrorCode),BC
;  228			}
;  229		}
L_103:
	OR	A,A
;  230		return 0;
	SBC	HL,HL
;  231	}
L_104:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesF ***************************
;Name                         Addr/Register   Size   Type
;_ErrorCode                          IMPORT      3   variable
;_buffer                             STATIC     16   variable
;_strncmp                            IMPORT  -----   function
;line                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__78:
	DB	"FORMAT "
	DB	0
L__80:
	DB	"ASM"
	DB	0
L__82:
	DB	"Bad Format"
	DB	0
	SEGMENT CODE
;  232	
;  233	uint8_t *OpcodesI(const char *line){
_OpcodesI:
	LD	HL,-3
	CALL	__frameset
;  234		if (!strncmp(line,"INC ",4)){
	LD	BC,4
	PUSH	BC
	LD	BC,L__84
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_144
;  235			uint8_t o;
;  236			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  237			if (checkRRArg(line,0x03)){
	LD	BC,3
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_111
;  238				return &buffer;
	LD	HL,_buffer
	JR	L_146
;  239			} else if ((o = getRArgN(line))!=0xFF){
L_111:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-1),A
	CP	A,255
	JR	Z,L_109
;  240				if (buffer[0]==1){
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_106
;  241					buffer[1]=(o<<3)+0x04;
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	HL,_buffer
	INC	HL
	ADD	A,4
	LD	(HL),A
;  242				} else {
	JR	L_107
L_106:
;  243					buffer[2]=(o<<3)+0x04;
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,4
	LD	HL,_buffer+2
	LD	(HL),A
;  244				}
L_107:
;  245				return &buffer;
	LD	HL,_buffer
	JR	L_146
;  246			} else {
L_109:
;  247				return invalidArgument();
	CALL	_invalidArgument
	JR	L_146
;  248			}
;  249		} else if (!strncmp(line,"IN0 ",4)){
L_144:
	LD	BC,4
	PUSH	BC
	LD	BC,L__89
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_142
;  250			uint8_t o;
;  251			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  252			if ((o = getRArgN(line))!=0xFF){
	LD	BC,IY
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-2),A
	CP	A,255
	JR	Z,L_145
;  253				if (buffer[0]==2){
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_113
;  254					return invalidArgument();
	CALL	_invalidArgument
	JR	L_146
;  255				} else {
L_113:
;  256					buffer[0]=2;
	LD	A,2
;  257					buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),237
;  258					buffer[2]=o<<3;
	LD	HL,_buffer+2
	LD	A,(IX+-2)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	(HL),A
;  259					return &buffer;
	LD	HL,_buffer
	JR	L_146
;  260				}
;  261			}
;  262		} else if (!strncmp(line,"INIMR",5)){
L_142:
	LD	BC,5
	PUSH	BC
	LD	BC,L__93
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_140
;  263			buffer[0]=2;
	LD	A,2
;  264			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  265			buffer[2]=0x92;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),146
;  266			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  267		} else if (!strncmp(line,"INI2R",5)){
L_140:
	LD	BC,5
	PUSH	BC
	LD	BC,L__95
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_138
;  268			buffer[0]=2;
	LD	A,2
;  269			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  270			buffer[2]=0x94;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),148
;  271			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  272		} else if (!strncmp(line,"INDMR",5)){
L_138:
	LD	BC,5
	PUSH	BC
	LD	BC,L__97
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_136
;  273			buffer[0]=2;
	LD	A,2
;  274			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  275			buffer[2]=0x9A;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),154
;  276			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  277		} else if (!strncmp(line,"IND2R",5)){
L_136:
	LD	BC,5
	PUSH	BC
	LD	BC,L__99
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_134
;  278			buffer[0]=2;
	LD	A,2
;  279			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  280			buffer[2]=0x9C;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),156
;  281			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  282		} else if (!strncmp(line,"INIM",4)){
L_134:
	LD	BC,4
	PUSH	BC
	LD	BC,L__101
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_132
;  283			buffer[0]=2;
	LD	A,2
;  284			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  285			buffer[2]=0x82;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),130
;  286			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  287		} else if (!strncmp(line,"INI2",4)){
L_132:
	LD	BC,4
	PUSH	BC
	LD	BC,L__103
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_130
;  288			buffer[0]=2;
	LD	A,2
;  289			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  290			buffer[2]=0x84;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),132
;  291			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  292		} else if (!strncmp(line,"INDM",4)){
L_130:
	LD	BC,4
	PUSH	BC
	LD	BC,L__105
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_128
;  293			buffer[0]=2;
	LD	A,2
;  294			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  295			buffer[2]=0x8A;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),138
;  296			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  297		} else if (!strncmp(line,"IND2",4)){
L_128:
	LD	BC,4
	PUSH	BC
	LD	BC,L__107
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_126
;  298			buffer[0]=2;
	LD	A,2
;  299			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  300			buffer[2]=0x8C;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),140
;  301			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  302		} else if (!strncmp(line,"IN ",3)){
L_126:
	LD	BC,3
	PUSH	BC
	LD	BC,L__109
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_124
;  303			uint8_t r = getRArgN(line+3);
	LD	IY,(IX+6)
	LEA	BC,IY+3
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-3),A
;  304			if (r!=0xFF){
	CP	A,255
	JR	Z,L_145
;  305				buffer[0]=2;
	LD	A,2
;  306				buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),237
;  307				buffer[2]=0x40+(r<<3);
	LD	HL,_buffer+2
	LD	A,(IX+-3)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,64
	LD	(HL),A
;  308				return &buffer;
	LD	HL,_buffer
	JR	L_146
;  309			}
;  310		} else if (!strncmp(line,"INIR",4)){
L_124:
	LD	BC,4
	PUSH	BC
	LD	BC,L__112
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_122
;  311			buffer[0]=2;
	LD	A,2
;  312			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  313			buffer[2]=0xB2;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),178
;  314			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  315		} else if (!strncmp(line,"INDR",4)){
L_122:
	LD	BC,4
	PUSH	BC
	LD	BC,L__114
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_120
;  316			buffer[0]=2;
	LD	A,2
;  317			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  318			buffer[2]=0xBA;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),186
;  319			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  320		} else if (!strncmp(line,"INI",3)){
L_120:
	LD	BC,3
	PUSH	BC
	LD	BC,L__116
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_118
;  321			buffer[0]=2;
	LD	A,2
;  322			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  323			buffer[2]=0xA2;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),162
;  324			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  325		} else if (!strncmp(line,"IND",3)){
L_118:
	LD	BC,3
	PUSH	BC
	LD	BC,L__118
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_145
;  326			buffer[0]=2;
	LD	A,2
;  327			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  328			buffer[2]=0xAA;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),170
;  329			return &buffer;
	LD	HL,_buffer
	JR	L_146
;  330		}
L_145:
	OR	A,A
;  331		return 0;
	SBC	HL,HL
;  332	}
L_146:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesI ***************************
;Name                         Addr/Register   Size   Type
;_invalidArgument                    IMPORT  -----   function
;_getRArgN                           IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_checkRRArg                         IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;r                                     IX-3      1   variable
;o                                     IX-2      1   variable
;o                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 12 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__84:
	DB	"INC "
	DB	0
L__89:
	DB	"IN0 "
	DB	0
L__93:
	DB	"INIMR"
	DB	0
L__95:
	DB	"INI2R"
	DB	0
L__97:
	DB	"INDMR"
	DB	0
L__99:
	DB	"IND2R"
	DB	0
L__101:
	DB	"INIM"
	DB	0
L__103:
	DB	"INI2"
	DB	0
L__105:
	DB	"INDM"
	DB	0
L__107:
	DB	"IND2"
	DB	0
L__109:
	DB	"IN "
	DB	0
L__112:
	DB	"INIR"
	DB	0
L__114:
	DB	"INDR"
	DB	0
L__116:
	DB	"INI"
	DB	0
L__118:
	DB	"IND"
	DB	0
	SEGMENT CODE
;  333	
;  334	uint8_t *OpcodesJ(const char *line){
_OpcodesJ:
	LD	HL,-7
	CALL	__frameset
;  335		if (!strncmp(line,"JR ",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__121
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_165
;  336			int num;
;  337			uint8_t c;
;  338			line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  339			buffer[0]=2;
;  340			if (!strncmp(line,"NZ,",3)){
	LD	BC,3
	PUSH	BC
	LD	A,2
	LD	BC,L__123
	PUSH	BC
	LD	(_buffer),A
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_156
;  341				buffer[1]=0x20;
	LD	HL,_buffer
	INC	HL
	LD	(HL),32
;  342				line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  343			} else if (!strncmp(line,"NC,",3)){
	JR	L_157
L_156:
	LD	BC,3
	PUSH	BC
	LD	BC,L__125
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_154
;  344				buffer[1]=0x30;
	LD	HL,_buffer
	INC	HL
	LD	(HL),48
;  345				line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  346			} else if (!strncmp(line,"Z,",2)){
	JR	L_157
L_154:
	LD	BC,2
	PUSH	BC
	LD	BC,L__127
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_152
;  347				buffer[1]=0x28;
	LD	HL,_buffer
	INC	HL
	LD	(HL),40
;  348				line+=2;
	LD	IY,(IX+6)
	LEA	IY,IY+2
	LD	(IX+6),IY
;  349			} else if (!strncmp(line,"C,",2)){
	JR	L_157
L_152:
	LD	BC,2
	PUSH	BC
	LD	BC,L__129
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_150
;  350				buffer[1]=0x38;
	LD	HL,_buffer
	INC	HL
	LD	(HL),56
;  351				line+=2;
	LD	IY,(IX+6)
	LEA	IY,IY+2
	LD	(IX+6),IY
;  352			} else if (isNumber(line)) {
	JR	L_157
L_150:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_148
;  353				buffer[1]=0x18;
	LD	HL,_buffer
	INC	HL
	LD	(HL),24
;  354			} else {
	JR	L_157
L_148:
;  355				return invalidArgument();
	CALL	_invalidArgument
	JR	L_167
;  356			}
L_157:
;  357			num=getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	(IX+-4),HL
;  358			if (num<-0x80 || num>=0x80){
	LD	BC,16777088
	OR	A,A
	SBC	HL,BC
	JP	M,L_159
	LD	BC,128
	LD	HL,(IX+-4)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_160
L_159:
;  359				ErrorCode = "JR Offset out of range";
	LD	BC,L__134
	LD	(_ErrorCode),BC
	OR	A,A
;  360				return 0;
	SBC	HL,HL
	JR	L_167
;  361			}
L_160:
;  362			buffer[2]=num;
	LD	HL,_buffer+2
	LD	A,(IX+-4)
	LD	(HL),A
;  363			return &buffer;
	LD	HL,_buffer
	JR	L_167
;  364		} else if (!strncmp(line,"JP ",3)){
L_165:
	LD	BC,3
	PUSH	BC
	LD	BC,L__135
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_166
;  365			int num;
;  366			uint8_t cc;
;  367			line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  368			buffer[0]=ADDR_BYTES+1;
;  369			if ((cc=getCondition(&line))==0xFF){
	PEA	IX+6
	LD	A,(_ADDR_BYTES)
	INC	A
	LD	(_buffer),A
	CALL	_getCondition
	POP	BC
	LD	(IX+-1),A
	CP	A,255
	JR	NZ,L_162
	OR	A,A
;  370				return 0;
	SBC	HL,HL
	JR	L_167
;  371			}
L_162:
;  372			buffer[1]=0xC2+cc;
	LD	A,(IX+-1)
;  373			num = getNumber(&line);
	PEA	IX+6
	LD	HL,_buffer
	INC	HL
	ADD	A,194
	LD	(HL),A
	CALL	_getNumber
	POP	BC
	LD	(IX+-7),HL
;  374			memcpy(&buffer[2],&num,ADDR_BYTES);
	LD	A,(_ADDR_BYTES)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PEA	IX+-7
	LD	BC,_buffer+2
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  375			return &buffer;
	LD	HL,_buffer
	JR	L_167
;  376		}
L_166:
	OR	A,A
;  377		return 0;
	SBC	HL,HL
;  378	}
L_167:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesJ ***************************
;Name                         Addr/Register   Size   Type
;_memcpy                             IMPORT  -----   function
;_getCondition                       IMPORT  -----   function
;_ADDR_BYTES                         IMPORT      1   variable
;_ErrorCode                          IMPORT      3   variable
;_getNumber                          IMPORT  -----   function
;_invalidArgument                    IMPORT  -----   function
;_isNumber                           IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_strncmp                            IMPORT  -----   function
;num                                   IX-7      3   variable
;num                                   IX-4      3   variable
;cc                                    IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__121:
	DB	"JR "
	DB	0
L__123:
	DB	"NZ,"
	DB	0
L__125:
	DB	"NC,"
	DB	0
L__127:
	DB	"Z,"
	DB	0
L__129:
	DB	"C,"
	DB	0
L__134:
	DB	"JR Offset out of range"
	DB	0
L__135:
	DB	"JP "
	DB	0
	SEGMENT CODE
;  379	
;  380	uint8_t *OpcodesL(const char *line){
_OpcodesL:
	LD	HL,-51
	CALL	__frameset
;  381		char *oldline;
;  382		if (!strncmp(line,"LD ",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__139
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_276
;  383			uint8_t o,iro;
;  384			line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  385			if (!strncmp(line,"(HL),",5)){ //ld (hl)
	LD	BC,5
	PUSH	BC
	LD	BC,L__141
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_246
;  386				line+=5;
	LD	IY,(IX+6)
	LEA	IY,IY+5
	LD	(IX+6),IY
;  387				if (checkRArg(line,0x70)){ //ld (hl),r
	LD	BC,112
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_277
;  388					//return &buffer; optimize!
;  389				} else if (isNumber(line)){ //ld (hl),$00
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_176
;  390					buffer[0]=2;
;  391					buffer[1]=0x36;
;  392					buffer[2]=getNumber(&line);
	PEA	IX+6
	LD	A,2
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),54
	CALL	_getNumber
	POP	BC
	LD	IY,_buffer
	LD	(IY+2),L
;  393				} else if (checkRRArg(line,0x0F)){ //ld (hl),rr
	JR	L_277
L_176:
	LD	BC,15
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_174
;  394					if (buffer[1]==0xDD){
	LD	BC,_buffer
	INC	BC
	LD	(IX+-15),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,221
	SBC	HL,BC
	JR	NZ,L_171
;  395						buffer[2]=0x3F;
	LD	HL,_buffer+2
	LD	(HL),63
;  396					} else if (buffer[1]==0xFD){
	JR	L_172
L_171:
	LD	HL,(IX+-15)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,253
	SBC	HL,BC
	JR	NZ,L_169
;  397						buffer[2]=0x3E;
	LD	HL,_buffer+2
	LD	(HL),62
;  398					} else {
	JR	L_172
L_169:
;  399						buffer[0]=2;
	LD	A,2
;  400						buffer[2]=buffer[1];
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	A,(HL)
	LD	(IY+2),A
;  401					}
L_172:
;  402					buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(HL),237
;  403				} else {
	JR	L_277
L_174:
;  404					return invalidArgument();
	CALL	_invalidArgument
	JR	L_278
;  405				}
;  406			} else if (*line=='(' && isNumber(oldline=line+1)){ //ld ($000000),A
L_246:
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,40
	SBC	HL,BC
	JR	NZ,L_244
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+-21),BC
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_244
;  407				int num = getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	(IX+-27),HL
;  408				line++;
	LD	BC,(IX+6)
	LD	(IX+-30),BC
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
;  409				if (*line=='A'){
	LD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,65
	SBC	HL,BC
	JR	NZ,L_183
;  410					buffer[0]=ADDR_BYTES+1;
	LD	A,(_ADDR_BYTES)
	INC	A
;  411					buffer[1]=0x32;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),50
;  412					memcpy(&buffer[2],&num,ADDR_BYTES);
	LD	A,(_ADDR_BYTES)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PEA	IX+-27
	LD	BC,_buffer+2
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  413				} else if (!checkRRArg(line,0x43)){ //ld ($000000),rr
	JR	L_277
L_183:
	LD	BC,67
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_277
;  414					return invalidArgument(); //this acts as an "else" case
	CALL	_invalidArgument
	JR	L_278
;  415				}
;  416			} else if ((o=getRArgN(line))!=0xFF){ //ld r,X
L_244:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-1),A
	CP	A,255
	JR	Z,L_242
;  417				uint8_t irc;
;  418				if (line[0]=='I'){ //ixh/l
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,73
	SBC	HL,BC
	JR	NZ,L_188
;  419					if (line[1]=='X'){
	LD	HL,(IX+6)
	INC	HL
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,88
	SBC	HL,BC
	JR	NZ,L_185
;  420						irc=0xDD;
	LD	(IX+-3),221
;  421					} else {
	JR	L_186
L_185:
;  422						irc=0xFD;
	LD	(IX+-3),253
;  423					}
L_186:
;  424					line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  425				} else {
	JR	L_213
L_188:
;  426					irc = 0;
	LD	(IX+-3),0
;  427					line+=2;
	LD	IY,(IX+6)
	LEA	IY,IY+2
	LD	(IX+6),IY
;  428				}
L_213:
;  429				if (*line=='(' && isNumber(line+1) && o==7){ //ld A,($000000)
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,40
	SBC	HL,BC
	JR	NZ,L_212
	LD	BC,(IX+6)
	INC	BC
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_212
	LD	A,(IX+-1)
	CP	A,7
	JR	NZ,L_212
;  430					int num;
;  431					line++;
	LD	BC,(IX+6)
	LD	(IX+-33),BC
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
;  432					buffer[0] = ADDR_BYTES+1;
;  433					buffer[1] = 0x3A;
;  434					num = getNumber(&line);
	PEA	IX+6
	LD	A,(_ADDR_BYTES)
	INC	A
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),58
	CALL	_getNumber
	POP	BC
	LD	(IX+-24),HL
;  435					memcpy(&buffer[2],&num,ADDR_BYTES);
	LD	A,(_ADDR_BYTES)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PEA	IX+-24
	LD	BC,_buffer+2
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  436				} else if (isNumber(line)){ //ld r,$00
	JR	L_277
L_212:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_210
;  437					uint8_t num = getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	(IX+-8),L
;  438					if (irc){ //ld ixh/l,$00
	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_193
;  439						buffer[0]=3;
	LD	A,3
	LD	(_buffer),A
;  440						buffer[1]=irc;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-3)
	LD	(HL),A
;  441						buffer[2]=(o<<3)+0x06;
	LD	IY,_buffer
	LEA	HL,IY+2
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,6
	LD	(HL),A
;  442						buffer[3]=num;
	LD	A,(IX+-8)
	LD	(IY+3),A
;  443					} else { //ld r,$00
	JR	L_277
L_193:
;  444						buffer[0]=2;
	LD	A,2
	LD	(_buffer),A
;  445						buffer[1]=(o<<3)+0x06;
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	HL,_buffer
	INC	HL
	ADD	A,6
	LD	(HL),A
;  446						buffer[2]=num;
	LD	HL,_buffer+2
	LD	A,(IX+-8)
	LD	(HL),A
;  447					}
;  448				} else if (iro = isIrOff(line)){ //ld r,(ir+dd)
	JR	L_277
L_210:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_isIrOff
	POP	BC
	LD	(IX+-2),L
	LD	A,(IX+-2)
	OR	A,A
	JR	Z,L_208
;  449					line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  450					if (buffer[0]==2){
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_201
;  451						return invalidArgument(); //cant ``ld ixh/l,(ir+dd)``
	CALL	_invalidArgument
	JR	L_278
;  452					}
L_201:
;  453					if (*line=='+'){
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,43
	SBC	HL,BC
	JR	NZ,L_200
;  454						line++;
	LD	BC,(IX+6)
	LD	(IX+-36),BC
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
;  455						buffer[3]=getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	IY,_buffer
	LD	(IY+3),L
;  456					} else if (*line=='-'){
	JR	L_202
L_200:
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,45
	SBC	HL,BC
	JR	NZ,L_198
;  457						line++;
	LD	BC,(IX+6)
	LD	(IX+-39),BC
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
;  458						buffer[3]=-getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	CALL	__ineg
	LD	IY,_buffer
	LD	(IY+3),L
;  459					} else {
	JR	L_202
L_198:
;  460						return invalidArgument();
	CALL	_invalidArgument
	JR	L_278
;  461					}
L_202:
;  462					buffer[0]=3;
	LD	A,3
	LD	(_buffer),A
;  463					buffer[1]=iro;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-2)
	LD	(HL),A
;  464					buffer[2]=0x06+(o<<3);
	LD	HL,_buffer+2
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,6
	LD	(HL),A
;  465				} else if (checkRArg(line,0x40)){ //ld r,r
	JR	L_277
L_208:
	LD	BC,64
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_206
;  466					if (buffer[0]==2){
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_204
;  467						buffer[2]+=o<<3;
	LD	IY,_buffer
	LEA	IY,IY+2
	LD	(IX+-42),IY
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	HL,(IX+-42)
	ADD	A,(HL)
	LD	HL,(IX+-42)
	LD	(HL),A
;  468					} else {
	JR	L_277
L_204:
;  469						buffer[1]+=o<<3;
	LD	BC,_buffer
	INC	BC
	LD	(IX+-45),BC
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	HL,BC
	ADD	A,(HL)
	LD	HL,(IX+-45)
	LD	(HL),A
;  470					}
;  471				} else {
	JR	L_277
L_206:
;  472					return invalidArgument();
	CALL	_invalidArgument
	JR	L_278
;  473				}
;  474			} else if (checkRRArg(line,0x01)){ //ld rr,X
L_242:
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_277
;  475				line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  476				if (*line=='(' && isNumber(line+1)){ //ld rr,($000000)
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,40
	SBC	HL,BC
	JR	NZ,L_239
	LD	BC,(IX+6)
	INC	BC
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_239
;  477					int num;
;  478					line++;
	LD	BC,(IX+6)
	LD	(IX+-48),BC
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
;  479					getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
;  480					if (buffer[0]==2){ //ld ir,($000000)
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_219
;  481						buffer[2]=0x2A;
	LD	HL,_buffer+2
	LD	(HL),42
;  482					} else { //ld rr,($000000)
	JR	L_277
L_219:
;  483						int num = getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
;  484						if (buffer[1]==0x21){ //ld hl,($000000)
	LD	BC,_buffer
	INC	BC
	LD	(IX+-12),HL
	LD	(IX+-6),BC
	LD	HL,BC
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,33
	SBC	HL,BC
	JR	NZ,L_217
;  485							buffer[1]=0x2A;
	LD	HL,(IX+-6)
	LD	(HL),42
;  486							memcpy(&buffer[2],&num,ADDR_BYTES);
	LD	A,(_ADDR_BYTES)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PEA	IX+-12
	LD	BC,_buffer+2
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  487							buffer[0]=ADDR_BYTES+1;
	LD	A,(_ADDR_BYTES)
	INC	A
	LD	(_buffer),A
;  488						} else { //ld rr,($000000)
	JR	L_277
L_217:
;  489							buffer[2]=buffer[1]+0x4A;
	LD	HL,(IX+-6)
	LD	A,(HL)
	LD	IY,_buffer
	LEA	HL,IY+2
	ADD	A,74
	LD	(HL),A
;  490							buffer[1]=0xED;
	LD	HL,(IX+-6)
	LD	(HL),237
;  491							memcpy(&buffer[3],&num,ADDR_BYTES);
	LD	A,(_ADDR_BYTES)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PEA	IX+-12
	LEA	BC,IY+3
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  492							buffer[0]=ADDR_BYTES+2;
	LD	A,(_ADDR_BYTES)
	INC	A
	INC	A
	LD	(_buffer),A
;  493						}
;  494					}
;  495				} else if (isNumber(line)){ //ld rr,$000000
	JR	L_277
L_239:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_237
;  496					int num = getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	(IX+-18),HL
;  497					if (buffer[0]==2){
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_221
;  498						memcpy(&buffer[3],&num,ADDR_BYTES);
	LD	A,(_ADDR_BYTES)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PEA	IX+-18
	LD	BC,_buffer+3
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  499						buffer[0] = ADDR_BYTES+2;
	LD	A,(_ADDR_BYTES)
	INC	A
	INC	A
	LD	(_buffer),A
;  500					} else {
	JR	L_277
L_221:
;  501						memcpy(&buffer[2],&num,ADDR_BYTES);
	LD	A,(_ADDR_BYTES)
	UEXT	HL
	LD	L,A
	PUSH	HL
	PEA	IX+-18
	LD	BC,_buffer+2
	PUSH	BC
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  502						buffer[0] = ADDR_BYTES+1;
	LD	A,(_ADDR_BYTES)
	INC	A
	LD	(_buffer),A
;  503					}
;  504				} else if (!strncmp(line,"(HL)",4)){ //ld rr,(hl)
	JR	L_277
L_237:
	LD	BC,4
	PUSH	BC
	LD	BC,L__173
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_235
;  505					if (buffer[0]==2) {
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_225
;  506						if (buffer[1]==0xDD){
	LD	HL,_buffer
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,221
	SBC	HL,BC
	JR	NZ,L_223
;  507							buffer[2]=0x36;
	LD	HL,_buffer+2
	LD	(HL),54
;  508						} else {
	JR	L_226
L_223:
;  509							buffer[2]=0x37;
	LD	HL,_buffer+2
	LD	(HL),55
;  510						}
;  511					} else {
	JR	L_226
L_225:
;  512						buffer[0]=2;
	LD	A,2
;  513						buffer[2]=buffer[1];
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	A,(HL)
	LD	(IY+2),A
;  514					}
L_226:
;  515					buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(HL),237
;  516				} else if (iro=isIrOff(line)) { //ld rr,(ir+dd)
	JR	L_277
L_235:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_isIrOff
	POP	BC
	LD	(IX+-2),L
	LD	A,(IX+-2)
	OR	A,A
	JR	Z,L_233
;  517					uint8_t dd=getIrOff(&line);
	PEA	IX+6
	CALL	_getIrOff
	POP	BC
	LD	(IX+-9),A
;  518					if (buffer[0]==2){ //ld ir,(ir+dd)
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_230
;  519						if (buffer[1]==0xDD){ //ld ix,(ir+dd)
	LD	HL,_buffer
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,221
	SBC	HL,BC
	JR	NZ,L_228
;  520							buffer[2]=0x31;
	LD	HL,_buffer+2
	LD	(HL),49
;  521						} else { //ld iy,(ir+dd)
	JR	L_231
L_228:
;  522							buffer[2]=0x37;
	LD	HL,_buffer+2
	LD	(HL),55
;  523						}
;  524					} else { //ld rr,(ir+dd)
	JR	L_231
L_230:
;  525						buffer[2]=buffer[1]+7;
	LD	HL,_buffer
	INC	HL
	LD	A,(HL)
	LD	HL,_buffer+2
	ADD	A,7
	LD	(HL),A
;  526					}
L_231:
;  527					buffer[0]=3;
	LD	A,3
	LD	(_buffer),A
;  528					buffer[1]=iro;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-2)
	LD	(HL),A
;  529				} else {
	JR	L_277
L_233:
;  530					return invalidArgument();
	CALL	_invalidArgument
	JR	L_278
;  531				}
;  532			} 
;  533		} else if (!strncmp(line,"LDIR",4)){
L_276:
	LD	BC,4
	PUSH	BC
	LD	BC,L__180
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_274
;  534			buffer[0]=2; buffer[1]=0xED; buffer[2]=0xB0;
	LD	A,2
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),176
;  535		} else if (!strncmp(line,"LDDR",4)){
	JR	L_277
L_274:
	LD	BC,4
	PUSH	BC
	LD	BC,L__182
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_272
;  536			buffer[0]=2; buffer[1]=0xED; buffer[2]=0xB8;
	LD	A,2
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),184
;  537		} else if (!strncmp(line,"LDI",3)){
	JR	L_277
L_272:
	LD	BC,3
	PUSH	BC
	LD	BC,L__184
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_270
;  538			buffer[0]=2; buffer[1]=0xED; buffer[2]=0xA0;
	LD	A,2
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),160
;  539		} else if (!strncmp(line,"LDD",3)){
	JR	L_277
L_270:
	LD	BC,3
	PUSH	BC
	LD	BC,L__186
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_268
;  540			buffer[0]=2; buffer[1]=0xED; buffer[2]=0xA8;
	LD	A,2
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),168
;  541		} else if (!strncmp(line,"LEA ",4)){
	JR	L_277
L_268:
	LD	BC,4
	PUSH	BC
	LD	BC,L__188
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_266
;  542			if (checkRRArg(line,0x02)){
	LD	BC,2
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_264
;  543				uint8_t cc,c3;
;  544				line+=2;
	LD	IY,(IX+6)
	LEA	IY,IY+2
	LD	(IX+6),IY
;  545				if (buffer[0]==2){
	LD	A,(_buffer)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_251
;  546					if (buffer[1]==0xDD){
;  547						cc = buffer[2]+0x10;
;  548					} else {
;  549						cc = buffer[2]+0x11;
;  550					}
;  551				}
L_251:
;  552				if (*line!='I'){
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,73
	SBC	HL,BC
	JR	Z,L_253
;  553					return invalidArgument();
	CALL	_invalidArgument
	JR	L_278
;  554				}
L_253:
;  555				line++;
	LD	BC,(IX+6)
	LD	(IX+-51),BC
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
;  556				if ((c3=*line)=='X'){
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-7),A
	CP	A,88
	JR	NZ,L_261
;  557					if (buffer[1]==0xDD){
	LD	HL,_buffer
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,221
	SBC	HL,BC
	JR	NZ,L_255
;  558						buffer[2]=0x32;
	LD	HL,_buffer+2
	LD	(HL),50
;  559					} else {
	JR	L_262
L_255:
;  560						buffer[2]=0x54;
	LD	HL,_buffer+2
	LD	(HL),84
;  561					}
;  562				} else if (c3=='Y') {
	JR	L_262
L_261:
	LD	A,(IX+-7)
	CP	A,89
	JR	NZ,L_259
;  563					if (buffer[1]==0xFD){
	LD	HL,_buffer
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,253
	SBC	HL,BC
	JR	NZ,L_257
;  564						buffer[2]=0x33;
	LD	HL,_buffer+2
	LD	(HL),51
;  565					} else {
	JR	L_262
L_257:
;  566						buffer[2]=0x55;
	LD	HL,_buffer+2
	LD	(HL),85
;  567					}
;  568				} else {
	JR	L_262
L_259:
;  569					return invalidArgument();
	CALL	_invalidArgument
	JR	L_278
;  570				}
L_262:
;  571				buffer[0]=3;
;  572				buffer[1]=0xED;
;  573				buffer[3] = getIrOff(&line);
	PEA	IX+6
	LD	A,3
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),237
	CALL	_getIrOff
	POP	BC
	LD	HL,_buffer+3
	LD	(HL),A
;  574			} else {
	JR	L_277
L_264:
;  575				return invalidArgument();
	CALL	_invalidArgument
	JR	L_278
;  576			}
;  577		} else {
L_266:
	OR	A,A
;  578			return 0;
	SBC	HL,HL
	JR	L_278
;  579		}
L_277:
;  580		return &buffer;
	LD	HL,_buffer
;  581	}
L_278:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesL ***************************
;Name                         Addr/Register   Size   Type
;_getIrOff                           IMPORT  -----   function
;_isIrOff                            IMPORT  -----   function
;_getRArgN                           IMPORT  -----   function
;_memcpy                             IMPORT  -----   function
;_ADDR_BYTES                         IMPORT      1   variable
;_invalidArgument                    IMPORT  -----   function
;_checkRRArg                         IMPORT  -----   function
;_getNumber                          IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_isNumber                           IMPORT  -----   function
;_checkRArg                          IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;num                                  IX-27      3   variable
;num                                  IX-24      3   variable
;oldline                              IX-21      3   variable
;num                                  IX-18      3   variable
;G_2                                  IX-15      3   variable
;num                                  IX-12      3   variable
;dd                                    IX-9      1   variable
;num                                   IX-8      1   variable
;c3                                    IX-7      1   variable
;G_3                                   IX-6      3   variable
;irc                                   IX-3      1   variable
;iro                                   IX-2      1   variable
;o                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 60 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__139:
	DB	"LD "
	DB	0
L__141:
	DB	"(HL),"
	DB	0
L__173:
	DB	"(HL)"
	DB	0
L__180:
	DB	"LDIR"
	DB	0
L__182:
	DB	"LDDR"
	DB	0
L__184:
	DB	"LDI"
	DB	0
L__186:
	DB	"LDD"
	DB	0
L__188:
	DB	"LEA "
	DB	0
	SEGMENT CODE
;  582	
;  583	uint8_t *OpcodesM(const char *line){
_OpcodesM:
	CALL	__frameset0
;  584		if (!strncmp(line,"MULT ",5)){
	LD	BC,5
	PUSH	BC
	LD	BC,L__199
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_282
;  585			line+=5;
	LD	IY,(IX+6)
	LEA	IY,IY+5
	LD	(IX+6),IY
;  586			if (checkRRArg(line,0x4C)){
	LD	BC,76
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_280
;  587				buffer[0]=2;
	LD	A,2
;  588				buffer[2]=buffer[1];
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	A,(HL)
;  589				buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(IY+2),A
	LD	(HL),237
;  590				return &buffer;
	LD	HL,_buffer
	JR	L_283
;  591			} else {
L_280:
;  592				return invalidArgument();
	CALL	_invalidArgument
	JR	L_283
;  593			}
;  594		}
L_282:
	OR	A,A
;  595		return 0;
	SBC	HL,HL
;  596	}
L_283:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesM ***************************
;Name                         Addr/Register   Size   Type
;_invalidArgument                    IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_checkRRArg                         IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;line                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__199:
	DB	"MULT "
	DB	0
	SEGMENT CODE
;  597	uint8_t *OpcodesN(const char *line){
_OpcodesN:
	CALL	__frameset0
;  598		if (!strncmp(line,"NEG",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__203
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_286
;  599			buffer[0]=2;
	LD	A,2
;  600			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  601			buffer[2]=0x44;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),68
;  602			return &buffer;
	LD	HL,_buffer
	JR	L_288
;  603		} else if (!strncmp(line,"NOP",3)){
L_286:
	LD	BC,3
	PUSH	BC
	LD	BC,L__205
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_287
;  604			buffer[0]=1;
	LD	A,1
;  605			buffer[1]=0;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),0
;  606			return &buffer;
	LD	HL,_buffer
	JR	L_288
;  607		}
L_287:
	OR	A,A
;  608		return 0;
	SBC	HL,HL
;  609	}
L_288:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesN ***************************
;Name                         Addr/Register   Size   Type
;_buffer                             STATIC     16   variable
;_strncmp                            IMPORT  -----   function
;line                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__203:
	DB	"NEG"
	DB	0
L__205:
	DB	"NOP"
	DB	0
	SEGMENT CODE
;  610	
;  611	uint8_t *OpcodesO(const char *line){
_OpcodesO:
	LD	HL,-35
	CALL	__frameset
;  612		if (!strncmp(line,"OR ",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__208
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_314
;  613			line+=3;
	LD	IY,(IX+6)
	LEA	IY,IY+3
	LD	(IX+6),IY
;  614			if (!checkRArg(line,0xB0)){
	LD	BC,176
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	(IX+-35),HL
	CALL	_checkRArg
	LD	HL,(IX+-35)
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_315
;  615				return invalidArgument();
	CALL	_invalidArgument
	JR	L_315
;  616			}
;  617		} else if (!strncmp(line,"OUT ",4)){
L_314:
	LD	BC,4
	PUSH	BC
	LD	BC,L__211
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_312
;  618			uint8_t r = getRArgN(line+4);
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	LD	(IX+-35),HL
	CALL	_getRArgN
	LD	HL,(IX+-35)
	POP	BC
	LD	(IX+-1),A
;  619			if (r!=0xFF){
	CP	A,255
	JR	Z,L_315
;  620				buffer[0]=2;
	LD	A,2
;  621				buffer[1]=0xED;
	LD	IY,_buffer
	LD	(_buffer),A
	LD	(IY+1),237
;  622				buffer[2]=0x41+(r<<3);
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,65
	LD	(IY+2),A
;  623			}
;  624		} else if (!strncmp(line,"OUT0 (",6)){
	JR	L_315
L_312:
	LD	BC,6
	PUSH	BC
	LD	BC,L__214
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_310
;  625			uint8_t r;
;  626			line+=6;
	LD	IY,(IX+6)
	LEA	IY,IY+6
	LD	(IX+6),IY
;  627			buffer[3] = getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	IY,_buffer
	LD	(IY+3),L
;  628			line++;
	LD	BC,(IX+6)
	LD	(IX+-5),BC
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+6),BC
;  629			r = getRArgN(line);
	PUSH	BC
	LD	(IX+-35),HL
	CALL	_getRArgN
	LD	HL,(IX+-35)
	POP	BC
	LD	(IX+-2),A
;  630			if (r!=0xFF){
	CP	A,255
	JR	Z,L_315
;  631				buffer[0]=3;
	LD	A,3
;  632				buffer[1]=0xED;
	LD	IY,_buffer
	LD	(_buffer),A
	LD	(IY+1),237
;  633				buffer[2]=0x01+(r<<3);
	LD	A,(IX+-2)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	INC	A
	LD	(IY+2),A
;  634			}
;  635		} else if (!strncmp(line,"OTI2R",5)){
	JR	L_315
L_310:
	LD	BC,5
	PUSH	BC
	LD	BC,L__217
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_308
;  636			buffer[0]=2;
	LD	A,2
;  637			buffer[1]=0xED;
	LD	(IX+-8),HL	; spill
	LD	HL,_buffer
	LD	(IX+-11),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-11)	; unspill
	INC	HL
	LD	(IX+-11),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(_buffer),A
;  638			buffer[2]=0xB4;
	LD	IY,_buffer
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-11)	; unspill
	LD	(HL),237
	LD	HL,(IX+-8)	; unspill
	LD	(IY+2),180
;  639		} else if (!strncmp(line,"OTD2R",5)){
	JR	L_315
L_308:
	LD	BC,5
	PUSH	BC
	LD	BC,L__219
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_306
;  640			buffer[0]=2;
	LD	A,2
;  641			buffer[1]=0xED;
	LD	(IX+-8),HL	; spill
	LD	HL,_buffer
	LD	(IX+-14),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-14)	; unspill
	INC	HL
	LD	(IX+-14),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(_buffer),A
;  642			buffer[2]=0xBC;
	LD	IY,_buffer
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-14)	; unspill
	LD	(HL),237
	LD	HL,(IX+-8)	; unspill
	LD	(IY+2),188
;  643		} else if (!strncmp(line,"OTIR",4)){
	JR	L_315
L_306:
	LD	BC,4
	PUSH	BC
	LD	BC,L__221
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_304
;  644			buffer[0]=2;
	LD	A,2
;  645			buffer[1]=0xED;
	LD	(IX+-8),HL	; spill
	LD	HL,_buffer
	LD	(IX+-17),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-17)	; unspill
	INC	HL
	LD	(IX+-17),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(_buffer),A
;  646			buffer[2]=0xB3;
	LD	IY,_buffer
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-17)	; unspill
	LD	(HL),237
	LD	HL,(IX+-8)	; unspill
	LD	(IY+2),179
;  647		} else if (!strncmp(line,"OTDR",4)){
	JR	L_315
L_304:
	LD	BC,4
	PUSH	BC
	LD	BC,L__223
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_302
;  648			buffer[0]=2;
	LD	A,2
;  649			buffer[1]=0xED;
	LD	(IX+-8),HL	; spill
	LD	HL,_buffer
	LD	(IX+-20),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-20)	; unspill
	INC	HL
	LD	(IX+-20),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(_buffer),A
;  650			buffer[2]=0xBB;
	LD	IY,_buffer
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-20)	; unspill
	LD	(HL),237
	LD	HL,(IX+-8)	; unspill
	LD	(IY+2),187
;  651		} else if (!strncmp(line,"OTI2",4)){
	JR	L_315
L_302:
	LD	BC,4
	PUSH	BC
	LD	BC,L__225
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_300
;  652			buffer[0]=2;
	LD	A,2
;  653			buffer[1]=0xED;
	LD	(IX+-8),HL	; spill
	LD	HL,_buffer
	LD	(IX+-23),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-23)	; unspill
	INC	HL
	LD	(IX+-23),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(_buffer),A
;  654			buffer[2]=0xA4;
	LD	IY,_buffer
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-23)	; unspill
	LD	(HL),237
	LD	HL,(IX+-8)	; unspill
	LD	(IY+2),164
;  655		} else if (!strncmp(line,"OTD2",4)){
	JR	L_315
L_300:
	LD	BC,4
	PUSH	BC
	LD	BC,L__227
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_298
;  656			buffer[0]=2;
	LD	A,2
;  657			buffer[1]=0xED;
	LD	(IX+-8),HL	; spill
	LD	HL,_buffer
	LD	(IX+-26),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-26)	; unspill
	INC	HL
	LD	(IX+-26),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(_buffer),A
;  658			buffer[2]=0xAC;
	LD	IY,_buffer
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-26)	; unspill
	LD	(HL),237
	LD	HL,(IX+-8)	; unspill
	LD	(IY+2),172
;  659		} else if (!strncmp(line,"OTI",3)){
	JR	L_315
L_298:
	LD	BC,3
	PUSH	BC
	LD	BC,L__229
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_296
;  660			buffer[0]=2;
	LD	A,2
;  661			buffer[1]=0xED;
	LD	(IX+-8),HL	; spill
	LD	HL,_buffer
	LD	(IX+-29),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-29)	; unspill
	INC	HL
	LD	(IX+-29),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(_buffer),A
;  662			buffer[2]=0xA3;
	LD	IY,_buffer
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-29)	; unspill
	LD	(HL),237
	LD	HL,(IX+-8)	; unspill
	LD	(IY+2),163
;  663		} else if (!strncmp(line,"OTD",3)){
	JR	L_315
L_296:
	LD	BC,3
	PUSH	BC
	LD	BC,L__231
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_294
;  664			buffer[0]=2;
	LD	A,2
;  665			buffer[1]=0xED;
	LD	(IX+-8),HL	; spill
	LD	HL,_buffer
	LD	(IX+-32),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-32)	; unspill
	INC	HL
	LD	(IX+-32),HL	; spill
	LD	HL,(IX+-8)	; unspill
	LD	(_buffer),A
;  666			buffer[2]=0xAB;
	LD	IY,_buffer
	LD	(IX+-8),HL	; spill
	LD	HL,(IX+-32)	; unspill
	LD	(HL),237
	LD	HL,(IX+-8)	; unspill
	LD	(IY+2),171
;  667		} else {
	JR	L_315
L_294:
	OR	A,A
;  668			return 0;
	SBC	HL,HL
;  669		}
;  670		
;  671	}
L_315:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesO ***************************
;Name                         Addr/Register   Size   Type
;_getNumber                          IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_getRArgN                           IMPORT  -----   function
;_invalidArgument                    IMPORT  -----   function
;_checkRArg                          IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;r                                     IX-2      1   variable
;r                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 44 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__208:
	DB	"OR "
	DB	0
L__211:
	DB	"OUT "
	DB	0
L__214:
	DB	"OUT0 ("
	DB	0
L__217:
	DB	"OTI2R"
	DB	0
L__219:
	DB	"OTD2R"
	DB	0
L__221:
	DB	"OTIR"
	DB	0
L__223:
	DB	"OTDR"
	DB	0
L__225:
	DB	"OTI2"
	DB	0
L__227:
	DB	"OTD2"
	DB	0
L__229:
	DB	"OTI"
	DB	0
L__231:
	DB	"OTD"
	DB	0
	SEGMENT CODE
;  672	
;  673	uint8_t *OpcodesP(const char *line){
_OpcodesP:
	LD	HL,-1
	CALL	__frameset
;  674		if (!strncmp(line,"POP ",4)){
	LD	BC,4
	PUSH	BC
	LD	BC,L__234
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_329
;  675			if (checkRRArg(line+4,0xC1)){
	LD	BC,193
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_317
;  676				return &buffer;
	LD	HL,_buffer
	JR	L_331
;  677			}
L_317:
;  678			return invalidArgument();
	CALL	_invalidArgument
	JR	L_331
;  679		} else if (!strncmp(line,"PUSH ",5)){
L_329:
	LD	BC,5
	PUSH	BC
	LD	BC,L__237
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_327
;  680			if (checkRRArg(line+5,0xC5)){
	LD	BC,197
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+5
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_319
;  681				return &buffer;
	LD	HL,_buffer
	JR	L_331
;  682			}
L_319:
;  683			return invalidArgument();
	CALL	_invalidArgument
	JR	L_331
;  684		} else if (!strncmp(line,"PEA ",4)){
L_327:
	LD	BC,4
	PUSH	BC
	LD	BC,L__240
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_330
;  685			uint8_t c;
;  686			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  687			if (c=isIrOff(line)){
	LD	BC,IY
	PUSH	BC
	CALL	_isIrOff
	POP	BC
	LD	(IX+-1),L
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_324
;  688				buffer[0]=3;
	LD	A,3
;  689				buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),237
;  690				if (c==0xDD){
	LD	A,(IX+-1)
	CP	A,221
	JR	NZ,L_321
;  691					buffer[2]=0x65;
	LD	HL,_buffer+2
	LD	(HL),101
;  692				} else {
	JR	L_322
L_321:
;  693					buffer[2]=0x66;
	LD	HL,_buffer+2
	LD	(HL),102
;  694				}
L_322:
;  695				buffer[3]=getIrOff(&line);
	PEA	IX+6
	CALL	_getIrOff
	POP	BC
	LD	HL,_buffer+3
	LD	(HL),A
;  696			} else {
	JR	L_330
L_324:
;  697				return invalidArgument();
	CALL	_invalidArgument
	JR	L_331
;  698			}
;  699		}
L_330:
	OR	A,A
;  700		return 0;
	SBC	HL,HL
;  701	}
L_331:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesP ***************************
;Name                         Addr/Register   Size   Type
;_getIrOff                           IMPORT  -----   function
;_isIrOff                            IMPORT  -----   function
;_invalidArgument                    IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_checkRRArg                         IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;c                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__234:
	DB	"POP "
	DB	0
L__237:
	DB	"PUSH "
	DB	0
L__240:
	DB	"PEA "
	DB	0
	SEGMENT CODE
;  702	
;  703	uint8_t *OpcodesR(const char *line) {
_OpcodesR:
	LD	HL,-4
	CALL	__frameset
;  704		if (!strncmp(line,"RETN",4)){
	LD	BC,4
	PUSH	BC
	LD	BC,L__245
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_372
;  705			buffer[0]=2;
	LD	A,2
;  706			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  707			buffer[2]=0x45;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),69
;  708			return &buffer;
	LD	HL,_buffer
	JR	L_374
;  709		} else if (!strncmp(line,"RETI",4)){
L_372:
	LD	BC,4
	PUSH	BC
	LD	BC,L__247
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_370
;  710			buffer[0]=2;
	LD	A,2
;  711			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
;  712			buffer[2]=0x4D;
	LD	IY,_buffer
	LD	(HL),237
	LD	(IY+2),77
;  713			return &buffer;
	LD	HL,_buffer
	JR	L_374
;  714		} else if (!strncmp(line,"RLCA",4)){
L_370:
	LD	BC,4
	PUSH	BC
	LD	BC,L__249
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_368
;  715			buffer[0]=1;
	LD	A,1
;  716			buffer[1]=0x07;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),7
;  717			return &buffer;
	LD	HL,_buffer
	JR	L_374
;  718		} else if (!strncmp(line,"RRCA",4)){
L_368:
	LD	BC,4
	PUSH	BC
	LD	BC,L__251
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_366
;  719			buffer[0]=1;
	LD	A,1
;  720			buffer[1]=0x0F;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),15
;  721			return &buffer;
	LD	HL,_buffer
	JR	L_374
;  722		} else if (!strncmp(line,"RLA",3)){
L_366:
	LD	BC,3
	PUSH	BC
	LD	BC,L__253
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_364
;  723			buffer[0]=1;
	LD	A,1
;  724			buffer[1]=0x17;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),23
;  725			return &buffer;
	LD	HL,_buffer
	JR	L_374
;  726		} else if (!strncmp(line,"RRA",3)){
L_364:
	LD	BC,3
	PUSH	BC
	LD	BC,L__255
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_362
;  727			buffer[0]=1;
	LD	A,1
;  728			buffer[1]=0x1F;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),31
;  729			return &buffer;
	LD	HL,_buffer
	JR	L_374
;  730		} else if (!strncmp(line,"RES ",4)){
L_362:
	LD	BC,4
	PUSH	BC
	LD	BC,L__257
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_360
;  731			uint8_t r,bit;
;  732			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  733			bit=getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	(IX+-2),L
;  734			if (bit<=7){
	LD	A,7
	CP	A,(IX+-2)
	JR	C,L_336
;  735				if (r=isIrOff(line)){
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_isIrOff
	POP	BC
	LD	(IX+-1),L
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_334
;  736					buffer[0]=4;
	LD	A,4
	LD	(_buffer),A
;  737					buffer[1]=r;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-1)
;  738					buffer[2]=0xCB;
;  739					buffer[3]=getIrOff(&line);
	PEA	IX+6
	LD	IY,_buffer
	LD	(HL),A
	LD	(IY+2),203
	CALL	_getIrOff
	POP	BC
	LD	IY,_buffer
	LEA	HL,IY+3
	LD	(HL),A
;  740					buffer[4]=0x86+(bit<<3);
	LEA	HL,IY+4
	LD	A,(IX+-2)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,134
	LD	(HL),A
;  741				} else if ((r=getRArgN(line))!=0xFF){
	JR	L_336
L_334:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-1),A
	CP	A,255
	JR	Z,L_336
;  742					buffer[0]=2;
	LD	A,2
;  743					buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),203
;  744					buffer[2]=0x80+r+(bit<<3);
	LD	A,(IX+-1)
	ADD	A,128
	LD	B,A
	LD	HL,_buffer+2
	LD	A,(IX+-2)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	C,A
	LD	A,B
	ADD	A,C
	LD	(HL),A
;  745					return &buffer;
	LD	HL,_buffer
	JR	L_374
;  746				}
;  747			}
L_336:
;  748			return invalidArgument();
	CALL	_invalidArgument
	JR	L_374
;  749		} else if (!strncmp(line+4,"RLC ",4)){
L_360:
	LD	BC,4
	PUSH	BC
	LD	BC,L__262
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_358
;  750			if (checkRArg(line,0x00)){
	LD	BC,0
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_373
;  751				buffer[0]=2;
	LD	A,2
;  752				buffer[2]=buffer[1];
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	A,(HL)
;  753				buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(IY+2),A
	LD	(HL),203
;  754			}
;  755		} else if (!strncmp(line,"RRC ",4)){
	JR	L_373
L_358:
	LD	BC,4
	PUSH	BC
	LD	BC,L__265
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_356
;  756			if (checkRArg(line+4,0x08)){
	LD	BC,8
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_373
;  757				buffer[0]=2;
	LD	A,2
;  758				buffer[2]=buffer[1];
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	A,(HL)
;  759				buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(IY+2),A
	LD	(HL),203
;  760			}
;  761		} else if (!strncmp(line,"RL ",3)){
	JR	L_373
L_356:
	LD	BC,3
	PUSH	BC
	LD	BC,L__268
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_354
;  762			if (checkRArg(line+3,0x10)){
	LD	BC,16
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+3
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_373
;  763				buffer[0]=2;
	LD	A,2
;  764				buffer[2]=buffer[1];
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	A,(HL)
;  765				buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(IY+2),A
	LD	(HL),203
;  766			}
;  767		} else if (!strncmp(line,"RR ",3)){
	JR	L_373
L_354:
	LD	BC,3
	PUSH	BC
	LD	BC,L__271
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_352
;  768			if (checkRArg(line+3,0x18)){
	LD	BC,24
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+3
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_373
;  769				buffer[0]=2;
	LD	A,2
;  770				buffer[2]=buffer[1];
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	A,(HL)
;  771				buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(IY+2),A
	LD	(HL),203
;  772			}
;  773		} else if (!strncmp(line,"RST ",4)){
	JR	L_373
L_352:
	LD	BC,4
	PUSH	BC
	LD	BC,L__274
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_350
;  774			uint8_t n;
;  775			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  776			n = getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	(IX+-3),L
;  777			if (!(n&7||n>0x38)){
	LD	A,(IX+-3)
	AND	A,7
	JR	NZ,L_343
	LD	A,56
	CP	A,(IX+-3)
	JR	C,L_343
;  778				buffer[0]=1;
	LD	A,1
	LD	(_buffer),A
;  779				buffer[1]=0xC7+n;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-3)
	ADD	A,199
	LD	(HL),A
;  780				return &buffer;
	LD	HL,_buffer
	JR	L_374
;  781			}
L_343:
;  782			return invalidArgument();
	CALL	_invalidArgument
	JR	L_374
;  783		} else if (!strncmp(line,"RET ",4)){
L_350:
	LD	BC,4
	PUSH	BC
	LD	BC,L__278
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_348
;  784			uint8_t cc;
;  785			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  786			buffer[0]=1;
;  787			if ((cc=getCondition(&line))==0xFF){
	PEA	IX+6
	LD	A,1
	LD	(_buffer),A
	CALL	_getCondition
	POP	BC
	LD	(IX+-4),A
	CP	A,255
	JR	NZ,L_345
	OR	A,A
;  788				return 0;
	SBC	HL,HL
	JR	L_374
;  789			}
L_345:
;  790			buffer[1]=0xC0+cc;
	LD	A,(IX+-4)
	LD	HL,_buffer
	INC	HL
	ADD	A,192
	LD	(HL),A
;  791			return &buffer;
	LD	HL,_buffer
	JR	L_374
;  792		} else if (!strncmp(line,"RET",3)){
L_348:
	LD	BC,3
	PUSH	BC
	LD	BC,L__281
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_373
;  793			buffer[0]=1;
	LD	A,1
;  794			buffer[1]=0xC9;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),201
;  795			return &buffer;
	LD	HL,_buffer
	JR	L_374
;  796		}
L_373:
	OR	A,A
;  797		return 0;
	SBC	HL,HL
;  798	}
L_374:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesR ***************************
;Name                         Addr/Register   Size   Type
;_getCondition                       IMPORT  -----   function
;_checkRArg                          IMPORT  -----   function
;_invalidArgument                    IMPORT  -----   function
;_getRArgN                           IMPORT  -----   function
;_getIrOff                           IMPORT  -----   function
;_isIrOff                            IMPORT  -----   function
;_getNumber                          IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_strncmp                            IMPORT  -----   function
;cc                                    IX-4      1   variable
;n                                     IX-3      1   variable
;bit                                   IX-2      1   variable
;r                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__245:
	DB	"RETN"
	DB	0
L__247:
	DB	"RETI"
	DB	0
L__249:
	DB	"RLCA"
	DB	0
L__251:
	DB	"RRCA"
	DB	0
L__253:
	DB	"RLA"
	DB	0
L__255:
	DB	"RRA"
	DB	0
L__257:
	DB	"RES "
	DB	0
L__262:
	DB	"RLC "
	DB	0
L__265:
	DB	"RRC "
	DB	0
L__268:
	DB	"RL "
	DB	0
L__271:
	DB	"RR "
	DB	0
L__274:
	DB	"RST "
	DB	0
L__278:
	DB	"RET "
	DB	0
L__281:
	DB	"RET"
	DB	0
	SEGMENT CODE
;  799	
;  800	uint8_t *OpcodesS(const char *line){
_OpcodesS:
	LD	HL,-5
	CALL	__frameset
;  801		if (!strncmp(line,"SUB ",4)){
	LD	BC,4
	PUSH	BC
	LD	BC,L__284
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_406
;  802			if (checkRArg(line+4,0x90)){
	LD	BC,144
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_376
;  803				return &buffer;
	LD	HL,_buffer
	JR	L_408
;  804			}
L_376:
;  805			return invalidArgument();
	CALL	_invalidArgument
	JR	L_408
;  806		} else if (!strncmp(line,"SBC ",4)){
L_406:
	LD	BC,4
	PUSH	BC
	LD	BC,L__287
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_404
;  807			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  808			if (checkRRArg(line,0x42)){
	LD	BC,66
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_379
;  809				buffer[0]=2;
	LD	A,2
;  810				buffer[2]=buffer[1];
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	IY,_buffer
	LD	A,(HL)
;  811				buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(IY+2),A
	LD	(HL),237
;  812				return &buffer;
	LD	HL,_buffer
	JR	L_408
;  813			} else if (checkRArg(line,0x98)){
L_379:
	LD	BC,152
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_407
;  814				return &buffer;
	LD	HL,_buffer
	JR	L_408
;  815			}
;  816		} else if (!strncmp(line,"SCF",3)){
L_404:
	LD	BC,3
	PUSH	BC
	LD	BC,L__291
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_402
;  817			buffer[0]=1;
	LD	A,1
;  818			buffer[1]=0x37;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),55
;  819			return &buffer;
	LD	HL,_buffer
	JR	L_408
;  820		} else if (!strncmp(line,"SET ",4)){
L_402:
	LD	BC,4
	PUSH	BC
	LD	BC,L__293
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_400
;  821			uint8_t r,bit;
;  822			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  823			bit=getNumber(&line);
	PEA	IX+6
	CALL	_getNumber
	POP	BC
	LD	(IX+-5),L
;  824			if (bit<=7){
	LD	A,7
	CP	A,(IX+-5)
	JR	C,L_384
;  825				if (r=isIrOff(line)){
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_isIrOff
	POP	BC
	LD	(IX+-1),L
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_382
;  826					buffer[0]=4;
	LD	A,4
	LD	(_buffer),A
;  827					buffer[1]=r;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-1)
;  828					buffer[2]=0xCB;
;  829					buffer[3]=getIrOff(&line);
	PEA	IX+6
	LD	IY,_buffer
	LD	(HL),A
	LD	(IY+2),203
	CALL	_getIrOff
	POP	BC
	LD	IY,_buffer
	LEA	HL,IY+3
	LD	(HL),A
;  830					buffer[4]=0xC6+(bit<<3);
	LEA	HL,IY+4
	LD	A,(IX+-5)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,198
	LD	(HL),A
;  831				} else if ((r=getRArgN(line))!=0xFF){
	JR	L_384
L_382:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-1),A
	CP	A,255
	JR	Z,L_384
;  832					buffer[0]=2;
	LD	A,2
;  833					buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),203
;  834					buffer[2]=0xC0+r+(bit<<3);
	LD	A,(IX+-1)
	ADD	A,192
	LD	B,A
	LD	HL,_buffer+2
	LD	A,(IX+-5)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	LD	C,A
	LD	A,B
	ADD	A,C
	LD	(HL),A
;  835					return &buffer;
	LD	HL,_buffer
	JR	L_408
;  836				}
;  837			}
L_384:
;  838			return invalidArgument();
	CALL	_invalidArgument
	JR	L_408
;  839		} else if (!strncmp(line,"SLA ",4)){
L_400:
	LD	BC,4
	PUSH	BC
	LD	BC,L__298
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_398
;  840			uint8_t r;
;  841			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  842			if (r=isIrOff(line)){
	LD	BC,IY
	PUSH	BC
	CALL	_isIrOff
	POP	BC
	LD	(IX+-2),L
	LD	A,(IX+-2)
	OR	A,A
	JR	Z,L_387
;  843				buffer[0]=4;
	LD	A,4
	LD	(_buffer),A
;  844				buffer[1]=r;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-2)
;  845				buffer[2]=0xCB;
;  846				buffer[3]=getIrOff(&line);
	PEA	IX+6
	LD	IY,_buffer
	LD	(HL),A
	LD	(IY+2),203
	CALL	_getIrOff
	POP	BC
	LD	IY,_buffer
	LEA	HL,IY+3
	LD	(HL),A
;  847				buffer[4]=0x26;
	LD	(IY+4),38
;  848			} else if ((r=getRArgN(line))!=0xFF){
	JR	L_407
L_387:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-2),A
	CP	A,255
	JR	Z,L_407
;  849				buffer[0]=2;
	LD	A,2
;  850				buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),203
;  851				buffer[2]=0x20+r;
	LD	A,(IX+-2)
	LD	HL,_buffer+2
	ADD	A,32
	LD	(HL),A
;  852				return &buffer;
	LD	HL,_buffer
	JR	L_408
;  853			}
;  854		} else if (!strncmp(line,"SRA ",4)){
L_398:
	LD	BC,4
	PUSH	BC
	LD	BC,L__302
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_396
;  855			uint8_t r;
;  856			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  857			if (r=isIrOff(line)){
	LD	BC,IY
	PUSH	BC
	CALL	_isIrOff
	POP	BC
	LD	(IX+-3),L
	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_390
;  858				buffer[0]=4;
	LD	A,4
	LD	(_buffer),A
;  859				buffer[1]=r;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-3)
;  860				buffer[2]=0xCB;
;  861				buffer[3]=getIrOff(&line);
	PEA	IX+6
	LD	IY,_buffer
	LD	(HL),A
	LD	(IY+2),203
	CALL	_getIrOff
	POP	BC
	LD	IY,_buffer
	LEA	HL,IY+3
	LD	(HL),A
;  862				buffer[4]=0x2E;
	LD	(IY+4),46
;  863			} else if ((r=getRArgN(line))!=0xFF){
	JR	L_407
L_390:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-3),A
	CP	A,255
	JR	Z,L_407
;  864				buffer[0]=2;
	LD	A,2
;  865				buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),203
;  866				buffer[2]=0x28+r;
	LD	A,(IX+-3)
	LD	HL,_buffer+2
	ADD	A,40
	LD	(HL),A
;  867				return &buffer;
	LD	HL,_buffer
	JR	L_408
;  868			}
;  869		} else if (!strncmp(line,"SRL ",4)){
L_396:
	LD	BC,4
	PUSH	BC
	LD	BC,L__306
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_407
;  870			uint8_t r;
;  871			line+=4;
	LD	IY,(IX+6)
	LEA	IY,IY+4
	LD	(IX+6),IY
;  872			if (r=isIrOff(line)){
	LD	BC,IY
	PUSH	BC
	CALL	_isIrOff
	POP	BC
	LD	(IX+-4),L
	LD	A,(IX+-4)
	OR	A,A
	JR	Z,L_393
;  873				buffer[0]=4;
	LD	A,4
	LD	(_buffer),A
;  874				buffer[1]=r;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+-4)
;  875				buffer[2]=0xCB;
;  876				buffer[3]=getIrOff(&line);
	PEA	IX+6
	LD	IY,_buffer
	LD	(HL),A
	LD	(IY+2),203
	CALL	_getIrOff
	POP	BC
	LD	IY,_buffer
	LEA	HL,IY+3
	LD	(HL),A
;  877				buffer[4]=0x36;
	LD	(IY+4),54
;  878			} else if ((r=getRArgN(line))!=0xFF){
	JR	L_407
L_393:
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-4),A
	CP	A,255
	JR	Z,L_407
;  879				buffer[0]=2;
	LD	A,2
;  880				buffer[1]=0xCB;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),203
;  881				buffer[2]=0x30+r;
	LD	A,(IX+-4)
	LD	HL,_buffer+2
	ADD	A,48
	LD	(HL),A
;  882				return &buffer;
	LD	HL,_buffer
	JR	L_408
;  883			}
;  884		}
L_407:
	OR	A,A
;  885		return 0;
	SBC	HL,HL
;  886	}
L_408:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesS ***************************
;Name                         Addr/Register   Size   Type
;_getRArgN                           IMPORT  -----   function
;_getIrOff                           IMPORT  -----   function
;_isIrOff                            IMPORT  -----   function
;_getNumber                          IMPORT  -----   function
;_checkRRArg                         IMPORT  -----   function
;_invalidArgument                    IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_checkRArg                          IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;bit                                   IX-5      1   variable
;r                                     IX-4      1   variable
;r                                     IX-3      1   variable
;r                                     IX-2      1   variable
;r                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 14 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__284:
	DB	"SUB "
	DB	0
L__287:
	DB	"SBC "
	DB	0
L__291:
	DB	"SCF"
	DB	0
L__293:
	DB	"SET "
	DB	0
L__298:
	DB	"SLA "
	DB	0
L__302:
	DB	"SRA "
	DB	0
L__306:
	DB	"SRL "
	DB	0
	SEGMENT CODE
;  887	
;  888	uint8_t *OpcodesT(const char *line){
_OpcodesT:
	LD	HL,-1
	CALL	__frameset
;  889		if (!strncmp(line,"TST ",4)){
	LD	BC,4
	PUSH	BC
	LD	BC,L__311
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_413
;  890			uint8_t c;
;  891			if ((c=getRArgN(line+4))==0xFF){
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-1),A
	CP	A,255
	JR	NZ,L_410
;  892				return invalidArgument();
	CALL	_invalidArgument
	JR	L_415
;  893			}
L_410:
;  894			buffer[0]=2;
	LD	A,2
;  895			buffer[1]=0xED;
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),237
;  896			buffer[2]=(c<<3)+4;
	LD	HL,_buffer+2
	LD	A,(IX+-1)
	ADD	A,A
	ADD	A,A
	ADD	A,A
	ADD	A,4
	LD	(HL),A
;  897			return &buffer;
	LD	HL,_buffer
	JR	L_415
;  898		} else if (!strncmp(line,"TSR ",4)){
L_413:
	LD	BC,4
	PUSH	BC
	LD	BC,L__314
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_414
;  899			line+=4;
	LD	IY,(IX+6)
	LEA	BC,IY+4
	LD	(IX+6),BC
;  900			buffer[0]=3;
;  901			buffer[1]=0xED;
;  902			buffer[2]=0x74;
;  903			buffer[3]=getNumber(&line);
	PEA	IX+6
	LD	A,3
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),237
	LD	HL,_buffer+2
	LD	(HL),116
	CALL	_getNumber
	POP	BC
	LD	IY,_buffer
	LD	(IY+3),L
;  904			return &buffer;
	LD	HL,_buffer
	JR	L_415
;  905		}
L_414:
	OR	A,A
;  906		return 0;
	SBC	HL,HL
;  907	}
L_415:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesT ***************************
;Name                         Addr/Register   Size   Type
;_getNumber                          IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_invalidArgument                    IMPORT  -----   function
;_getRArgN                           IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;c                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__311:
	DB	"TST "
	DB	0
L__314:
	DB	"TSR "
	DB	0
	SEGMENT CODE
;  908	
;  909	uint8_t *OpcodesX(const char *line){
_OpcodesX:
	CALL	__frameset0
;  910		if (!strncmp(line,"XOR ",4)){
	LD	BC,4
	PUSH	BC
	LD	BC,L__317
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_420
;  911			if (checkRArg(line+4,0xA8)){
	LD	BC,168
	PUSH	BC
	LD	IY,(IX+6)
	LEA	BC,IY+4
	PUSH	BC
	CALL	_checkRArg
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_417
;  912				return &buffer;
	LD	HL,_buffer
	JR	L_421
;  913			} else {
L_417:
;  914				buffer[0]=2;
;  915				buffer[1]=0xEE;
;  916				buffer[2]=getNumber(&line);
	PEA	IX+6
	LD	A,2
	LD	HL,_buffer
	INC	HL
	LD	(_buffer),A
	LD	(HL),238
	CALL	_getNumber
	POP	BC
	LD	IY,_buffer
	LD	(IY+2),L
;  917			}
;  918			return invalidArgument();
	CALL	_invalidArgument
	JR	L_421
;  919		}
L_420:
	OR	A,A
;  920		return 0;
	SBC	HL,HL
;  921	}
L_421:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _OpcodesX ***************************
;Name                         Addr/Register   Size   Type
;_invalidArgument                    IMPORT  -----   function
;_getNumber                          IMPORT  -----   function
;_buffer                             STATIC     16   variable
;_checkRArg                          IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;line                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__317:
	DB	"XOR "
	DB	0
	SEGMENT CODE
;  922	
;  923	
;  924	
;  925	
;  926	
;  927	
;  928	
;  929	int getNumber(char **line){
_getNumber:
	LD	HL,-25
	CALL	__frameset
;  930		unsigned char c,c2;
;  931		int number;
;  932		uint8_t base;
;  933		base=10;
	LD	(IX+-6),10
;  934		if ((c=*(*line))=='('){
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	LD	(IX+-4),A
	CP	A,40
	JR	NZ,L_424
;  935			(*line)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
;  936			number = getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	(IX+-3),HL
;  937			c=*(*line);
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	LD	(IX+-4),A
;  938		} else {
	JR	L_430
L_424:
;  939			number = 0;
	LD	BC,0
	LD	(IX+-3),BC
;  940		}
L_430:
;  941		if (c<0x30||c>0x39){
	LD	A,(IX+-4)
	CP	A,48
	JR	C,L_429
	LD	A,57
	CP	A,(IX+-4)
	JR	NC,L_503
L_429:
;  942			uint8_t *data;
;  943			if (data=checkIncludes(*line)){
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_checkIncludes
	POP	BC
	LD	(IX+-9),HL
	CALL	__icmpzero
	JR	Z,L_503
;  944				if (data[0]){
	LD	HL,(IX+-9)
	LD	A,(HL)
	OR	A,A
	JR	Z,L_427
;  945					memcpy(&number,data+1,data[0]);
	LD	HL,(IX+-9)
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	PUSH	HL
	LD	BC,(IX+-9)
	INC	BC
	PUSH	BC
	PEA	IX+-3
	CALL	_memcpy
	POP	BC
	POP	BC
	POP	BC
;  946				} else {
	JR	L_503
L_427:
;  947					markUndefLabel(data+1);
	LD	BC,(IX+-9)
	INC	BC
	PUSH	BC
	CALL	_markUndefLabel
	POP	BC
	OR	A,A
;  948					return 0;
	SBC	HL,HL
	JR	L_507
;  949				}
;  950			}
;  951		}
;  952		while (c=*(*line)++){
L_504:
;  953			if (c=='?') {
	LD	A,(IX+-4)
	CP	A,63
	JR	NZ,L_502
;  954				c=*(*line)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	LD	(IX+-22),BC
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-4),A
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
;  955				if (c=='X'){
	LD	A,(IX+-4)
	CP	A,88
	JR	NZ,L_440
;  956					base = 16;
	LD	(IX+-6),16
;  957				} else if (c=='O') {
	JR	L_503
L_440:
	LD	A,(IX+-4)
	CP	A,79
	JR	NZ,L_438
;  958					base = 8;
	LD	(IX+-6),8
;  959				} else if (c=='D') {
	JR	L_503
L_438:
	LD	A,(IX+-4)
	CP	A,68
	JR	NZ,L_436
;  960					base = 10;
	LD	(IX+-6),10
;  961				} else if (c=='B') {
	JR	L_503
L_436:
	LD	A,(IX+-4)
	CP	A,66
	JR	NZ,L_434
;  962					base = 2;
	LD	(IX+-6),2
;  963				} else {
	JR	L_503
L_434:
;  964					ErrorCode = "Invalid Number Base";
	LD	BC,L__331
	LD	(_ErrorCode),BC
	OR	A,A
;  965					return 0;
	SBC	HL,HL
	JR	L_507
;  966				}
;  967			} else if (c=='-') {
L_502:
	LD	A,(IX+-4)
	CP	A,45
	JR	NZ,L_500
;  968				number -= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	LD	(IX+-3),HL
;  969			} else if (c=='+') {
	JR	L_503
L_500:
	LD	A,(IX+-4)
	CP	A,43
	JR	NZ,L_498
;  970				number += getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,(IX+-3)
	ADD	HL,BC
	LD	(IX+-3),HL
;  971			} else if (c=='/') {
	JR	L_503
L_498:
	LD	A,(IX+-4)
	CP	A,47
	JR	NZ,L_496
;  972				number /= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	CALL	__idivs
	LD	(IX+-3),HL
;  973			} else if (c=='*') {
	JR	L_503
L_496:
	LD	A,(IX+-4)
	CP	A,42
	JR	NZ,L_494
;  974				number *= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,(IX+-3)
	CALL	__imuls
	LD	(IX+-3),HL
;  975			} else if (c=='>') {
	JR	L_503
L_494:
	LD	A,(IX+-4)
	CP	A,62
	JR	NZ,L_492
;  976				if ((c2=*(*line))=='>'){
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	LD	(IX+-5),A
	CP	A,62
	JR	NZ,L_445
;  977					(*line)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
;  978					number >>= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	CALL	__ishrs
	LD	(IX+-3),HL
;  979				} else if (c2=='='){
	JR	L_503
L_445:
	LD	A,(IX+-5)
	CP	A,61
	JR	NZ,L_443
;  980					number = number >= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JP	M,L__340
	LD	B,1
	JR	L__341
L__340:
	LD	B,0
L__341:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	(IX+-3),HL
;  981				} else {
	JR	L_503
L_443:
;  982					number = number > getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L__343
	LD	B,1
	JR	L__344
L__343:
	LD	B,0
L__344:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	(IX+-3),HL
;  983				}
;  984			} else if (c=='<'){
	JR	L_503
L_492:
	LD	A,(IX+-4)
	CP	A,60
	JR	NZ,L_490
;  985				if ((c2=*(*line))=='<'){
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	LD	(IX+-5),A
	CP	A,60
	JR	NZ,L_450
;  986					(*line)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
;  987					number <<= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	CALL	__ishl
	LD	(IX+-3),HL
;  988				} else if (c2=='=') {
	JR	L_503
L_450:
	LD	A,(IX+-5)
	CP	A,61
	JR	NZ,L_448
;  989					number = number <= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L__349
	LD	B,1
	JR	L__350
L__349:
	LD	B,0
L__350:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	(IX+-3),HL
;  990				} else {
	JR	L_503
L_448:
;  991					number = number < getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L__352
	LD	B,1
	JR	L__353
L__352:
	LD	B,0
L__353:
	LD	A,B
	SEXT	HL
	LD	L,B
	LD	(IX+-3),HL
;  992				}
;  993			} else if (c=='!'){
	JR	L_503
L_490:
	LD	A,(IX+-4)
	CP	A,33
	JR	NZ,L_488
;  994				if ((c2=*(*line))=='A'){
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	LD	(IX+-5),A
	CP	A,65
	JR	NZ,L_479
;  995					number = number && getNumber(line);
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JR	Z,L_453
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_453
	LD	BC,1
	LD	(IX+-16),BC
	JR	L_454
L_453:
	LD	BC,0
	LD	(IX+-16),BC
L_454:
	LD	BC,(IX+-16)
	LD	(IX+-3),BC
;  996				} else if (c2=='O'){
	JR	L_503
L_479:
	LD	A,(IX+-5)
	CP	A,79
	JR	NZ,L_477
;  997					number = number || getNumber(line);
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JR	NZ,L_457
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_458
L_457:
	LD	BC,1
	LD	(IX+-19),BC
	JR	L_459
L_458:
	LD	BC,0
	LD	(IX+-19),BC
L_459:
	LD	BC,(IX+-19)
	LD	(IX+-3),BC
;  998				} else if (c2=='X'){
	JR	L_503
L_477:
	LD	A,(IX+-5)
	CP	A,88
	JR	NZ,L_475
;  999					number = !(number && getNumber(line));
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JR	Z,L_462
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_463
L_462:
	LD	BC,1
	LD	(IX+-13),BC
	JR	L_464
L_463:
	LD	BC,0
	LD	(IX+-13),BC
L_464:
	LD	BC,(IX+-13)
	LD	(IX+-3),BC
; 1000				} else if (c2=='+'){
	JR	L_503
L_475:
	LD	A,(IX+-5)
	CP	A,43
	JR	NZ,L_473
; 1001					number &= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,(IX+-3)
	CALL	__iand
	LD	(IX+-3),HL
; 1002				} else if (c2=='-') {
	JR	L_503
L_473:
	LD	A,(IX+-5)
	CP	A,45
	JR	NZ,L_471
; 1003					number |= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,(IX+-3)
	CALL	__ior
	LD	(IX+-3),HL
; 1004				} else if (c2=='*') {
	JR	L_503
L_471:
	LD	A,(IX+-5)
	CP	A,42
	JR	NZ,L_469
; 1005					number ^= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,(IX+-3)
	CALL	__ixor
	LD	(IX+-3),HL
; 1006				} else if (c2=='M') {
	JR	L_503
L_469:
	LD	A,(IX+-5)
	CP	A,77
	JR	NZ,L_467
; 1007					number %= getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	BC,HL
	LD	HL,(IX+-3)
	CALL	__irems
	LD	(IX+-3),HL
; 1008				} else {
	JR	L_503
L_467:
; 1009					ErrorCode = "Syntax Error: Expected logical operator";
	LD	BC,L__368
	LD	(_ErrorCode),BC
	OR	A,A
; 1010					return 0;
	SBC	HL,HL
	JR	L_507
; 1011				}
; 1012			} else if (c==')' || c==',' || c==' '){
L_488:
	LD	A,(IX+-4)
	CP	A,41
	JR	Z,L_485
	LD	A,(IX+-4)
	CP	A,44
	JR	Z,L_485
	LD	A,(IX+-4)
	CP	A,32
	JR	NZ,L_486
L_485:
; 1013				(*line)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
; 1014				return number;
	LD	HL,(IX+-3)
	JR	L_507
; 1015			} else {
L_486:
; 1016				uint8_t a = digitValue(c);
	LD	C,(IX+-4)
	LD	B,0
	PUSH	BC
	CALL	_digitValue
	POP	BC
	LD	(IX+-10),L
; 1017				if (a<base){
	LD	A,(IX+-10)
	CP	A,(IX+-6)
	JR	NC,L_484
; 1018					number = number*base + a;
	LD	A,(IX+-6)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+-3)
	CALL	__imuls
	LD	BC,HL
	LD	A,(IX+-10)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	LD	(IX+-3),HL
; 1019				} else {
	JR	L_503
L_484:
; 1020					ErrorCode = "Number Format Error";
	LD	BC,L__373
	LD	(_ErrorCode),BC
	OR	A,A
; 1021					return 0;
	SBC	HL,HL
	JR	L_507
; 1022				}
; 1023			}
; 1024		}
L_503:
	LD	HL,(IX+6)
	LD	BC,(HL)
	LD	(IX+-25),BC
	LD	HL,BC
	LD	A,(HL)
	LD	(IX+-4),A
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_504
; 1025		return number;
	LD	HL,(IX+-3)
; 1026	}
L_507:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getNumber ***************************
;Name                         Addr/Register   Size   Type
;_digitValue                         IMPORT  -----   function
;_ErrorCode                          IMPORT      3   variable
;_markUndefLabel                     IMPORT  -----   function
;_memcpy                             IMPORT  -----   function
;_checkIncludes                      IMPORT  -----   function
;temp460                              IX-19      3   variable
;temp455                              IX-16      3   variable
;temp465                              IX-13      3   variable
;a                                    IX-10      1   variable
;data                                  IX-9      3   variable
;base                                  IX-6      1   variable
;c2                                    IX-5      1   variable
;c                                     IX-4      1   variable
;number                                IX-3      3   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 34 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__331:
	DB	"Invalid Number Base"
	DB	0
L__368:
	DB	"Syntax Error: Expected logical operator"
	DB	0
L__373:
	DB	"Number Format Error"
	DB	0
	SEGMENT CODE
; 1027	
; 1028	
; 1029	
; 1030	uint8_t checkRRArg(const char *args,uint8_t base){
_checkRRArg:
	LD	HL,-3
	CALL	__frameset
; 1031		uint8_t c1,c2,o,i;
; 1032		c1 = args[0];
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	(IX+-1),A
; 1033		c2 = args[1];
	LD	HL,(IX+6)
	INC	HL
	LD	A,(HL)
	LD	(IX+-2),A
; 1034		if (c1=='S' && c2=='P')      o=0x30;
	LD	A,(IX+-1)
	CP	A,83
	JR	NZ,L_520
	LD	A,(IX+-2)
	CP	A,80
	JR	NZ,L_520
	LD	(IX+-3),48
; 1035		else if (c1=='H' && c2=='L') o=0x20;
	JR	L_527
L_520:
	LD	A,(IX+-1)
	CP	A,72
	JR	NZ,L_518
	LD	A,(IX+-2)
	CP	A,76
	JR	NZ,L_518
	LD	(IX+-3),32
; 1036		else if (c1=='D' && c2=='E') o=0x10;
	JR	L_527
L_518:
	LD	A,(IX+-1)
	CP	A,68
	JR	NZ,L_516
	LD	A,(IX+-2)
	CP	A,69
	JR	NZ,L_516
	LD	(IX+-3),16
; 1037		else {
	JR	L_527
L_516:
; 1038			if (c1!='I'){
	LD	A,(IX+-1)
	CP	A,73
	JR	Z,L_527
; 1039				if (!(c1=='B' && c2=='C')) return 0;
	LD	A,(IX+-1)
	CP	A,66
	JR	NZ,L_512
	LD	A,(IX+-2)
	CP	A,67
	JR	Z,L_513
L_512:
	XOR	A,A
	JR	L_529
L_513:
; 1040				o=0x00;
	LD	(IX+-3),0
; 1041			}
; 1042		}
L_527:
; 1043		if (c1=='I'){
	LD	A,(IX+-1)
	CP	A,73
	JR	NZ,L_526
; 1044			buffer[2] = base+0x20;
	LD	A,(IX+9)
	ADD	A,32
	LD	HL,_buffer+2
	LD	(HL),A
; 1045			if (c2=='X')      buffer[1]=0xDD;
	LD	A,(IX+-2)
	CP	A,88
	JR	NZ,L_523
	LD	HL,_buffer
	INC	HL
	LD	(HL),221
; 1046			else if (c2=='Y') buffer[1]=0xFD;
	JR	L_524
L_523:
	LD	A,(IX+-2)
	CP	A,89
	JR	NZ,L_524
	LD	HL,_buffer
	INC	HL
	LD	(HL),253
L_524:
; 1047			buffer[0] = 2;
	LD	A,2
	LD	(_buffer),A
; 1048		} else {
	JR	L_528
L_526:
; 1049			buffer[1] = base+o;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+9)
	ADD	A,(IX+-3)
	LD	(HL),A
; 1050			buffer[0] = 1;
	LD	A,1
	LD	(_buffer),A
; 1051		}
L_528:
; 1052		return buffer[0];
	LD	A,(_buffer)
; 1053	}
L_529:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _checkRRArg ***************************
;Name                         Addr/Register   Size   Type
;_buffer                             STATIC     16   variable
;o                                     IX-3      1   variable
;c2                                    IX-2      1   variable
;c1                                    IX-1      1   variable
;base                                  IX+9      1   parameter
;args                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


; 1054	
; 1055	int isNumber(const char *line){
_isNumber:
	LD	HL,-2
	CALL	__frameset
; 1056		uint8_t c1,c2;
; 1057		if (((c1=line[0])=='H' && (c2=line[1])=='L')||(c1=='D' && c2=='E')||
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	(IX+-1),A
	CP	A,72
	JR	NZ,L_532
	LD	HL,(IX+6)
	INC	HL
	LD	A,(HL)
	LD	(IX+-2),A
	CP	A,76
	JR	Z,L_539
L_532:
	LD	A,(IX+-1)
	CP	A,68
	JR	NZ,L_534
	LD	A,(IX+-2)
	CP	A,69
	JR	Z,L_539
L_534:
; 1058			(c1=='B' && c2=='C')||(c1=='A' && c2=='F')||(c1=='S' && c2=='P')){
	LD	A,(IX+-1)
	CP	A,66
	JR	NZ,L_536
	LD	A,(IX+-2)
	CP	A,67
	JR	Z,L_539
L_536:
	LD	A,(IX+-1)
	CP	A,65
	JR	NZ,L_538
	LD	A,(IX+-2)
	CP	A,70
	JR	Z,L_539
L_538:
	LD	A,(IX+-1)
	CP	A,83
	JR	NZ,L_540
	LD	A,(IX+-2)
	CP	A,80
	JR	NZ,L_540
L_539:
	OR	A,A
; 1059			return 0;
	SBC	HL,HL
	JR	L_541
; 1060		}
L_540:
; 1061		return 1;
	LD	HL,1
; 1062	}
L_541:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isNumber ***************************
;Name                         Addr/Register   Size   Type
;c2                                    IX-2      1   variable
;c1                                    IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 11 (bytes)
;       Spill Code: 0 (instruction)


; 1063	
; 1064	int isIrOff(const char *line){
_isIrOff:
	CALL	__frameset0
; 1065		if (!strncmp(line,"(IX",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__400
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_544
; 1066			return 0xDD;
	LD	HL,221
	JR	L_546
; 1067		} else if (!strncmp(line,"(IY",3)){
L_544:
	LD	BC,3
	PUSH	BC
	LD	BC,L__402
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_545
; 1068			return 0xFD;
	LD	HL,253
	JR	L_546
; 1069		}
L_545:
	OR	A,A
; 1070		return 0;
	SBC	HL,HL
; 1071	}
L_546:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _isIrOff ***************************
;Name                         Addr/Register   Size   Type
;_strncmp                            IMPORT  -----   function
;line                                  IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__400:
	DB	"(IX"
	DB	0
L__402:
	DB	"(IY"
	DB	0
	SEGMENT CODE
; 1072	
; 1073	int digitValue(char c){
_digitValue:
	LD	HL,-1
	CALL	__frameset
; 1074		uint8_t a;
; 1075		if ((a = c-0x30)<10){
	LD	A,(IX+6)
	SUB	A,48
	LD	(IX+-1),A
	CP	A,10
	JR	NC,L_549
; 1076			return a;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	JR	L_551
; 1077		} else if ((a = c-0x41)<26){
L_549:
	LD	A,(IX+6)
	SUB	A,65
	LD	(IX+-1),A
	CP	A,26
	JR	NC,L_550
; 1078			return a+10;
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,HL
	LEA	HL,IY+10
	JR	L_551
; 1079		}
L_550:
; 1080		return 0xFF;
	LD	HL,255
; 1081	}
L_551:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _digitValue ***************************
;Name                         Addr/Register   Size   Type
;a                                     IX-1      1   variable
;c                                     IX+6      1   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


; 1082	
; 1083	uint8_t checkRArg(const char *args,uint8_t base){
_checkRArg:
	LD	HL,-4
	CALL	__frameset
; 1084		uint8_t c=getRArgN(args);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getRArgN
	POP	BC
	LD	(IX+-1),A
; 1085		if (c==0xFF) return 0;
	CP	A,255
	JR	NZ,L_557
	XOR	A,A
	JR	L_559
L_557:
; 1086		if (args[1]=='X'){
	LD	BC,(IX+6)
	INC	BC
	LD	(IX+-4),BC
	LD	HL,BC
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,88
	SBC	HL,BC
	JR	NZ,L_556
; 1087			buffer[1]=0xDD;
	LD	HL,_buffer
	INC	HL
	LD	(HL),221
; 1088		} else if (args[1]=='Y'){
	JR	L_558
L_556:
	LD	HL,(IX+-4)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,89
	SBC	HL,BC
	JR	NZ,L_554
; 1089			buffer[1]=0xFD;
	LD	HL,_buffer
	INC	HL
	LD	(HL),253
; 1090		} else {
	JR	L_558
L_554:
; 1091			buffer[1]=base+c;
	LD	HL,_buffer
	INC	HL
	LD	A,(IX+9)
	ADD	A,(IX+-1)
	LD	(HL),A
; 1092			return (buffer[0]=1);
	LD	A,1
	LD	(_buffer),A
	JR	L_559
; 1093		}
L_558:
; 1094		buffer[2]=base+c;
	LD	A,(IX+9)
	ADD	A,(IX+-1)
	LD	HL,_buffer+2
	LD	(HL),A
; 1095		return (buffer[0]=2);
	LD	A,2
	LD	(_buffer),A
; 1096	}
L_559:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _checkRArg ***************************
;Name                         Addr/Register   Size   Type
;_buffer                             STATIC     16   variable
;_getRArgN                           IMPORT  -----   function
;G_5                                   IX-4      3   variable
;c                                     IX-1      1   variable
;base                                  IX+9      1   parameter
;args                                  IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


; 1097	
; 1098	uint8_t getRArgN(const char *args){
_getRArgN:
	LD	HL,-6
	CALL	__frameset
; 1099		uint8_t c,o;
; 1100		c = args[0]; o=0xFF;
	LD	HL,(IX+6)
	LD	A,(HL)
	LD	(IX+-1),A
	LD	(IX+-2),255
; 1101		if (c=='('){
	LD	A,(IX+-1)
	CP	A,40
	JR	NZ,L_589
; 1102			if (!strncmp(args+1,"HL)",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__413
	PUSH	BC
	LD	BC,(IX+6)
	INC	BC
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_561
; 1103				o=6;
	LD	(IX+-2),6
; 1104			} else {
	JR	L_590
L_561:
; 1105				o=-1;
	LD	(IX+-2),255
; 1106			}
; 1107		} else if (c=='I'){
	JR	L_590
L_589:
	LD	A,(IX+-1)
	CP	A,73
	JR	NZ,L_587
; 1108			if (args[2]=='H')      o=4;
	LD	IY,(IX+6)
	LEA	IY,IY+2
	LD	(IX+-6),IY
	LD	HL,(IX+-6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,72
	SBC	HL,BC
	JR	NZ,L_564
	LD	(IX+-2),4
; 1109			else if (args[2]=='L') o=5;
	JR	L_568
L_564:
	LD	HL,(IX+-6)
	LD	A,(HL)
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,76
	SBC	HL,BC
	JR	NZ,L_568
	LD	(IX+-2),5
L_568:
; 1110			if ((c=args[3])!=',' && c!=' ' && c){
	LD	IY,(IX+6)
	LD	A,(IY+3)
	LD	(IX+-1),A
	CP	A,44
	JR	Z,L_590
	LD	A,(IX+-1)
	CP	A,32
	JR	Z,L_590
	LD	A,(IX+-1)
	OR	A,A
	JR	Z,L_590
; 1111				return 0xFF;
	LD	A,255
	JR	L_591
; 1112			}
; 1113		} else {
L_587:
; 1114			uint8_t c2;
; 1115			if ((c2=args[1])!=',' && c2!=' ' && c2){
	LD	HL,(IX+6)
	INC	HL
	LD	A,(HL)
	LD	(IX+-3),A
	CP	A,44
	JR	Z,L_585
	LD	A,(IX+-3)
	CP	A,32
	JR	Z,L_585
	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_585
; 1116				return 0xFF;
	LD	A,255
	JR	L_591
; 1117			}
; 1118			else if (c=='A') o=7;
L_585:
	LD	A,(IX+-1)
	CP	A,65
	JR	NZ,L_583
	LD	(IX+-2),7
; 1119			else if (c=='B') o=0;
	JR	L_590
L_583:
	LD	A,(IX+-1)
	CP	A,66
	JR	NZ,L_581
	LD	(IX+-2),0
; 1120			else if (c=='C') o=1;
	JR	L_590
L_581:
	LD	A,(IX+-1)
	CP	A,67
	JR	NZ,L_579
	LD	(IX+-2),1
; 1121			else if (c=='D') o=2;
	JR	L_590
L_579:
	LD	A,(IX+-1)
	CP	A,68
	JR	NZ,L_577
	LD	(IX+-2),2
; 1122			else if (c=='E') o=3;
	JR	L_590
L_577:
	LD	A,(IX+-1)
	CP	A,69
	JR	NZ,L_575
	LD	(IX+-2),3
; 1123			else if (c=='H') o=4;
	JR	L_590
L_575:
	LD	A,(IX+-1)
	CP	A,72
	JR	NZ,L_573
	LD	(IX+-2),4
; 1124			else if (c=='L') o=5;
	JR	L_590
L_573:
	LD	A,(IX+-1)
	CP	A,76
	JR	NZ,L_590
	LD	(IX+-2),5
; 1125		}
L_590:
; 1126		return o;
	LD	A,(IX+-2)
; 1127	}
L_591:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getRArgN ***************************
;Name                         Addr/Register   Size   Type
;_strncmp                            IMPORT  -----   function
;G_6                                   IX-6      3   variable
;c2                                    IX-3      1   variable
;o                                     IX-2      1   variable
;c                                     IX-1      1   variable
;args                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__413:
	DB	"HL)"
	DB	0
	SEGMENT CODE
; 1128	
; 1129	uint8_t getIrOff(const char **line){
_getIrOff:
	LD	HL,-1
	CALL	__frameset
; 1130		uint8_t c;
; 1131		if ((c=*(*line))=='+'){
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	LD	(IX+-1),A
	CP	A,43
	JR	NZ,L_596
; 1132			(*line)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
; 1133			return getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	LD	A,L
	JR	L_597
; 1134		} else if (c=='-'){
L_596:
	LD	A,(IX+-1)
	CP	A,45
	JR	NZ,L_597
; 1135			(*line)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
; 1136			return -getNumber(line);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_getNumber
	POP	BC
	CALL	__ineg
	LD	A,L
; 1137		}
; 1138	}
L_597:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getIrOff ***************************
;Name                         Addr/Register   Size   Type
;_getNumber                          IMPORT  -----   function
;c                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


; 1139	
; 1140	uint8_t getCondition(const char **line){
_getCondition:
	LD	HL,-1
	CALL	__frameset
; 1141		uint8_t c;
; 1142		if (!strncmp(*line,"NZ,",3)){
	LD	BC,3
	PUSH	BC
	LD	BC,L__435
	PUSH	BC
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_615
; 1143			c=0x00;
	LD	(IX+-1),0
; 1144			(*line)+=3;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+3
	LD	HL,(IX+6)
	LD	(HL),BC
; 1145		} else if (!strncmp(*line,"NC,",3)){
	JR	L_616
L_615:
	LD	BC,3
	PUSH	BC
	LD	BC,L__437
	PUSH	BC
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_613
; 1146			c=0x10;
	LD	(IX+-1),16
; 1147			(*line)+=3;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+3
	LD	HL,(IX+6)
	LD	(HL),BC
; 1148		} else if (!strncmp(*line,"Z,",2)){
	JR	L_616
L_613:
	LD	BC,2
	PUSH	BC
	LD	BC,L__439
	PUSH	BC
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_611
; 1149			c=0x08;
	LD	(IX+-1),8
; 1150			(*line)+=2;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+2
	LD	HL,(IX+6)
	LD	(HL),BC
; 1151		} else if (!strncmp(*line,"C,",2)){
	JR	L_616
L_611:
	LD	BC,2
	PUSH	BC
	LD	BC,L__441
	PUSH	BC
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_609
; 1152			c=0x18;
	LD	(IX+-1),24
; 1153			(*line)+=2;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+2
	LD	HL,(IX+6)
	LD	(HL),BC
; 1154		} else if (!strncmp(*line,"PO,",3)) {
	JR	L_616
L_609:
	LD	BC,3
	PUSH	BC
	LD	BC,L__443
	PUSH	BC
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_607
; 1155			c=0x20;
	LD	(IX+-1),32
; 1156			(*line)+=3;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+3
	LD	HL,(IX+6)
	LD	(HL),BC
; 1157		} else if (!strncmp(*line,"PE,",3)) {
	JR	L_616
L_607:
	LD	BC,3
	PUSH	BC
	LD	BC,L__445
	PUSH	BC
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_605
; 1158			c=0x28;
	LD	(IX+-1),40
; 1159			(*line)+=3;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+3
	LD	HL,(IX+6)
	LD	(HL),BC
; 1160		} else if (!strncmp(*line,"P,",2)) {
	JR	L_616
L_605:
	LD	BC,2
	PUSH	BC
	LD	BC,L__447
	PUSH	BC
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_603
; 1161			c=0x30;
	LD	(IX+-1),48
; 1162			(*line)+=3;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+3
	LD	HL,(IX+6)
	LD	(HL),BC
; 1163		} else if (!strncmp(*line,"M,",2)) {
	JR	L_616
L_603:
	LD	BC,2
	PUSH	BC
	LD	BC,L__449
	PUSH	BC
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_strncmp
	POP	BC
	POP	BC
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_601
; 1164			c=0x38;
	LD	(IX+-1),56
; 1165			(*line)+=3;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+3
	LD	HL,(IX+6)
	LD	(HL),BC
; 1166		} else if (isNumber(*line)) {
	JR	L_616
L_601:
	LD	HL,(IX+6)
	LD	BC,(HL)
	PUSH	BC
	CALL	_isNumber
	POP	BC
	CALL	__icmpzero
	JR	Z,L_599
; 1167			c=0x09;
	LD	(IX+-1),9
; 1168		} else {
	JR	L_616
L_599:
; 1169			invalidArgument();
	CALL	_invalidArgument
; 1170			return 0xFF;
	LD	A,255
	JR	L_617
; 1171		}
L_616:
; 1172		return c;
	LD	A,(IX+-1)
; 1173	}
L_617:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _getCondition ***************************
;Name                         Addr/Register   Size   Type
;_invalidArgument                    IMPORT  -----   function
;_isNumber                           IMPORT  -----   function
;_strncmp                            IMPORT  -----   function
;c                                     IX-1      1   variable
;line                                  IX+6      3   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__435:
	DB	"NZ,"
	DB	0
L__437:
	DB	"NC,"
	DB	0
L__439:
	DB	"Z,"
	DB	0
L__441:
	DB	"C,"
	DB	0
L__443:
	DB	"PO,"
	DB	0
L__445:
	DB	"PE,"
	DB	0
L__447:
	DB	"P,"
	DB	0
L__449:
	DB	"M,"
	DB	0
	SEGMENT CODE
; 1174	
; 1175	uint8_t *invalidArgument(void){
_invalidArgument:
; 1176		ErrorCode = "Invalid Argument";
	LD	BC,L__453
	LD	(_ErrorCode),BC
	OR	A,A
; 1177		return 0;
	SBC	HL,HL
; 1178	}
	RET	


;**************************** _invalidArgument ***************************
;Name                         Addr/Register   Size   Type
;_ErrorCode                          IMPORT      3   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__453:
	DB	"Invalid Argument"
	DB	0
	XREF _checkIncludes:ROM
	XREF _markUndefLabel:ROM
	XREF _ErrorCode:ROM
	XREF _ADDR_BYTES:ROM
	XREF _strncmp:ROM
	XREF _memset:ROM
	XREF _memcpy:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __imulu:ROM
	XREF __ineg:ROM
	XREF __ior:ROM
	XREF __iand:ROM
	XREF __irems:ROM
	XREF __ixor:ROM
	XREF __ishrs:ROM
	XREF __ishl:ROM
	XREF __ildix:ROM
	XREF __istix:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __ishl_b:ROM
	XDEF _invalidArgument
	XDEF _getCondition
	XDEF _getIrOff
	XDEF _getRArgN
	XDEF _checkRArg
	XDEF _digitValue
	XDEF _isIrOff
	XDEF _isNumber
	XDEF _checkRRArg
	XDEF _getNumber
	XDEF _OpcodesX
	XDEF _OpcodesT
	XDEF _OpcodesS
	XDEF _OpcodesR
	XDEF _OpcodesP
	XDEF _OpcodesO
	XDEF _OpcodesN
	XDEF _OpcodesM
	XDEF _OpcodesL
	XDEF _OpcodesJ
	XDEF _OpcodesI
	XDEF _OpcodesF
	XDEF _OpcodesE
	XDEF _OpcodesD
	XDEF _OpcodesC
	XDEF _OpcodesB
	XDEF _OpcodesA
	XDEF _clearBuffer
	XDEF _buffer
	END
